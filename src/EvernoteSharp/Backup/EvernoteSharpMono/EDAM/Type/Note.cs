/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.Type
{

  [Serializable]
  public partial class Note : TBase
  {
    private string guid;
    private string title;
    private string content;
    private byte[] contentHash;
    private int contentLength;
    private long created;
    private long updated;
    private long deleted;
    private bool active;
    private int updateSequenceNum;
    private string notebookGuid;
    private List<string> tagGuids;
    private List<Resource> resources;
    private NoteAttributes attributes;
    private List<string> tagNames;

    public string Guid
    {
      get
      {
        return guid;
      }
      set
      {
        __isset.guid = true;
        this.guid = value;
      }
    }

    public string Title
    {
      get
      {
        return title;
      }
      set
      {
        __isset.title = true;
        this.title = value;
      }
    }

    public string Content
    {
      get
      {
        return content;
      }
      set
      {
        __isset.content = true;
        this.content = value;
      }
    }

    public byte[] ContentHash
    {
      get
      {
        return contentHash;
      }
      set
      {
        __isset.contentHash = true;
        this.contentHash = value;
      }
    }

    public int ContentLength
    {
      get
      {
        return contentLength;
      }
      set
      {
        __isset.contentLength = true;
        this.contentLength = value;
      }
    }

    public long Created
    {
      get
      {
        return created;
      }
      set
      {
        __isset.created = true;
        this.created = value;
      }
    }

    public long Updated
    {
      get
      {
        return updated;
      }
      set
      {
        __isset.updated = true;
        this.updated = value;
      }
    }

    public long Deleted
    {
      get
      {
        return deleted;
      }
      set
      {
        __isset.deleted = true;
        this.deleted = value;
      }
    }

    public bool Active
    {
      get
      {
        return active;
      }
      set
      {
        __isset.active = true;
        this.active = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this.updateSequenceNum = value;
      }
    }

    public string NotebookGuid
    {
      get
      {
        return notebookGuid;
      }
      set
      {
        __isset.notebookGuid = true;
        this.notebookGuid = value;
      }
    }

    public List<string> TagGuids
    {
      get
      {
        return tagGuids;
      }
      set
      {
        __isset.tagGuids = true;
        this.tagGuids = value;
      }
    }

    public List<Resource> Resources
    {
      get
      {
        return resources;
      }
      set
      {
        __isset.resources = true;
        this.resources = value;
      }
    }

    public NoteAttributes Attributes
    {
      get
      {
        return attributes;
      }
      set
      {
        __isset.attributes = true;
        this.attributes = value;
      }
    }

    public List<string> TagNames
    {
      get
      {
        return tagNames;
      }
      set
      {
        __isset.tagNames = true;
        this.tagNames = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool guid;
      public bool title;
      public bool content;
      public bool contentHash;
      public bool contentLength;
      public bool created;
      public bool updated;
      public bool deleted;
      public bool active;
      public bool updateSequenceNum;
      public bool notebookGuid;
      public bool tagGuids;
      public bool resources;
      public bool attributes;
      public bool tagNames;
    }

    public Note() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.guid = iprot.ReadString();
              this.__isset.guid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.title = iprot.ReadString();
              this.__isset.title = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              this.content = iprot.ReadString();
              this.__isset.content = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              this.contentHash = iprot.ReadBinary();
              this.__isset.contentHash = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              this.contentLength = iprot.ReadI32();
              this.__isset.contentLength = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              this.created = iprot.ReadI64();
              this.__isset.created = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              this.updated = iprot.ReadI64();
              this.__isset.updated = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              this.deleted = iprot.ReadI64();
              this.__isset.deleted = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              this.active = iprot.ReadBool();
              this.__isset.active = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              this.updateSequenceNum = iprot.ReadI32();
              this.__isset.updateSequenceNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              this.notebookGuid = iprot.ReadString();
              this.__isset.notebookGuid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                this.tagGuids = new List<string>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  string _elem10 = null;
                  _elem10 = iprot.ReadString();
                  this.tagGuids.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
              this.__isset.tagGuids = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                this.resources = new List<Resource>();
                TList _list11 = iprot.ReadListBegin();
                for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                {
                  Resource _elem13 = new Resource();
                  _elem13 = new Resource();
                  _elem13.Read(iprot);
                  this.resources.Add(_elem13);
                }
                iprot.ReadListEnd();
              }
              this.__isset.resources = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Struct) {
              this.attributes = new NoteAttributes();
              this.attributes.Read(iprot);
              this.__isset.attributes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                this.tagNames = new List<string>();
                TList _list14 = iprot.ReadListBegin();
                for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                {
                  string _elem16 = null;
                  _elem16 = iprot.ReadString();
                  this.tagNames.Add(_elem16);
                }
                iprot.ReadListEnd();
              }
              this.__isset.tagNames = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Note");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.guid != null && __isset.guid) {
        field.Name = "guid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.guid);
        oprot.WriteFieldEnd();
      }
      if (this.title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.title);
        oprot.WriteFieldEnd();
      }
      if (this.content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.content);
        oprot.WriteFieldEnd();
      }
      if (this.contentHash != null && __isset.contentHash) {
        field.Name = "contentHash";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.contentHash);
        oprot.WriteFieldEnd();
      }
      if (__isset.contentLength) {
        field.Name = "contentLength";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.contentLength);
        oprot.WriteFieldEnd();
      }
      if (__isset.created) {
        field.Name = "created";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.created);
        oprot.WriteFieldEnd();
      }
      if (__isset.updated) {
        field.Name = "updated";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.updated);
        oprot.WriteFieldEnd();
      }
      if (__isset.deleted) {
        field.Name = "deleted";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.deleted);
        oprot.WriteFieldEnd();
      }
      if (__isset.active) {
        field.Name = "active";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.active);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateSequenceNum) {
        field.Name = "updateSequenceNum";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.updateSequenceNum);
        oprot.WriteFieldEnd();
      }
      if (this.notebookGuid != null && __isset.notebookGuid) {
        field.Name = "notebookGuid";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.notebookGuid);
        oprot.WriteFieldEnd();
      }
      if (this.tagGuids != null && __isset.tagGuids) {
        field.Name = "tagGuids";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.tagGuids.Count));
          foreach (string _iter17 in this.tagGuids)
          {
            oprot.WriteString(_iter17);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.resources != null && __isset.resources) {
        field.Name = "resources";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.resources.Count));
          foreach (Resource _iter18 in this.resources)
          {
            _iter18.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.attributes != null && __isset.attributes) {
        field.Name = "attributes";
        field.Type = TType.Struct;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        this.attributes.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.tagNames != null && __isset.tagNames) {
        field.Name = "tagNames";
        field.Type = TType.List;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.tagNames.Count));
          foreach (string _iter19 in this.tagNames)
          {
            oprot.WriteString(_iter19);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Note(");
      sb.Append("guid: ");
      sb.Append(this.guid);
      sb.Append(",title: ");
      sb.Append(this.title);
      sb.Append(",content: ");
      sb.Append(this.content);
      sb.Append(",contentHash: ");
      sb.Append(this.contentHash);
      sb.Append(",contentLength: ");
      sb.Append(this.contentLength);
      sb.Append(",created: ");
      sb.Append(this.created);
      sb.Append(",updated: ");
      sb.Append(this.updated);
      sb.Append(",deleted: ");
      sb.Append(this.deleted);
      sb.Append(",active: ");
      sb.Append(this.active);
      sb.Append(",updateSequenceNum: ");
      sb.Append(this.updateSequenceNum);
      sb.Append(",notebookGuid: ");
      sb.Append(this.notebookGuid);
      sb.Append(",tagGuids: ");
      sb.Append(this.tagGuids);
      sb.Append(",resources: ");
      sb.Append(this.resources);
      sb.Append(",attributes: ");
      sb.Append(this.attributes== null ? "<null>" : this.attributes.ToString());
      sb.Append(",tagNames: ");
      sb.Append(this.tagNames);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
