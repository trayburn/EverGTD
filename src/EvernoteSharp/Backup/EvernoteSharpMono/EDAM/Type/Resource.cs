/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.Type
{

  [Serializable]
  public partial class Resource : TBase
  {
    private string guid;
    private string noteGuid;
    private Data data;
    private string mime;
    private short width;
    private short height;
    private short duration;
    private bool active;
    private Data recognition;
    private ResourceAttributes attributes;
    private int updateSequenceNum;
    private Data alternateData;

    public string Guid
    {
      get
      {
        return guid;
      }
      set
      {
        __isset.guid = true;
        this.guid = value;
      }
    }

    public string NoteGuid
    {
      get
      {
        return noteGuid;
      }
      set
      {
        __isset.noteGuid = true;
        this.noteGuid = value;
      }
    }

    public Data Data
    {
      get
      {
        return data;
      }
      set
      {
        __isset.data = true;
        this.data = value;
      }
    }

    public string Mime
    {
      get
      {
        return mime;
      }
      set
      {
        __isset.mime = true;
        this.mime = value;
      }
    }

    public short Width
    {
      get
      {
        return width;
      }
      set
      {
        __isset.width = true;
        this.width = value;
      }
    }

    public short Height
    {
      get
      {
        return height;
      }
      set
      {
        __isset.height = true;
        this.height = value;
      }
    }

    public short Duration
    {
      get
      {
        return duration;
      }
      set
      {
        __isset.duration = true;
        this.duration = value;
      }
    }

    public bool Active
    {
      get
      {
        return active;
      }
      set
      {
        __isset.active = true;
        this.active = value;
      }
    }

    public Data Recognition
    {
      get
      {
        return recognition;
      }
      set
      {
        __isset.recognition = true;
        this.recognition = value;
      }
    }

    public ResourceAttributes Attributes
    {
      get
      {
        return attributes;
      }
      set
      {
        __isset.attributes = true;
        this.attributes = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this.updateSequenceNum = value;
      }
    }

    public Data AlternateData
    {
      get
      {
        return alternateData;
      }
      set
      {
        __isset.alternateData = true;
        this.alternateData = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool guid;
      public bool noteGuid;
      public bool data;
      public bool mime;
      public bool width;
      public bool height;
      public bool duration;
      public bool active;
      public bool recognition;
      public bool attributes;
      public bool updateSequenceNum;
      public bool alternateData;
    }

    public Resource() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.guid = iprot.ReadString();
              this.__isset.guid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.noteGuid = iprot.ReadString();
              this.__isset.noteGuid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              this.data = new Data();
              this.data.Read(iprot);
              this.__isset.data = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              this.mime = iprot.ReadString();
              this.__isset.mime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              this.width = iprot.ReadI16();
              this.__isset.width = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              this.height = iprot.ReadI16();
              this.__isset.height = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              this.duration = iprot.ReadI16();
              this.__isset.duration = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              this.active = iprot.ReadBool();
              this.__isset.active = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              this.recognition = new Data();
              this.recognition.Read(iprot);
              this.__isset.recognition = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              this.attributes = new ResourceAttributes();
              this.attributes.Read(iprot);
              this.__isset.attributes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              this.updateSequenceNum = iprot.ReadI32();
              this.__isset.updateSequenceNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Struct) {
              this.alternateData = new Data();
              this.alternateData.Read(iprot);
              this.__isset.alternateData = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Resource");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.guid != null && __isset.guid) {
        field.Name = "guid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.guid);
        oprot.WriteFieldEnd();
      }
      if (this.noteGuid != null && __isset.noteGuid) {
        field.Name = "noteGuid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.noteGuid);
        oprot.WriteFieldEnd();
      }
      if (this.data != null && __isset.data) {
        field.Name = "data";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        this.data.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.mime != null && __isset.mime) {
        field.Name = "mime";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.mime);
        oprot.WriteFieldEnd();
      }
      if (__isset.width) {
        field.Name = "width";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(this.width);
        oprot.WriteFieldEnd();
      }
      if (__isset.height) {
        field.Name = "height";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(this.height);
        oprot.WriteFieldEnd();
      }
      if (__isset.duration) {
        field.Name = "duration";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(this.duration);
        oprot.WriteFieldEnd();
      }
      if (__isset.active) {
        field.Name = "active";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.active);
        oprot.WriteFieldEnd();
      }
      if (this.recognition != null && __isset.recognition) {
        field.Name = "recognition";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        this.recognition.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.attributes != null && __isset.attributes) {
        field.Name = "attributes";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        this.attributes.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateSequenceNum) {
        field.Name = "updateSequenceNum";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.updateSequenceNum);
        oprot.WriteFieldEnd();
      }
      if (this.alternateData != null && __isset.alternateData) {
        field.Name = "alternateData";
        field.Type = TType.Struct;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        this.alternateData.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Resource(");
      sb.Append("guid: ");
      sb.Append(this.guid);
      sb.Append(",noteGuid: ");
      sb.Append(this.noteGuid);
      sb.Append(",data: ");
      sb.Append(this.data== null ? "<null>" : this.data.ToString());
      sb.Append(",mime: ");
      sb.Append(this.mime);
      sb.Append(",width: ");
      sb.Append(this.width);
      sb.Append(",height: ");
      sb.Append(this.height);
      sb.Append(",duration: ");
      sb.Append(this.duration);
      sb.Append(",active: ");
      sb.Append(this.active);
      sb.Append(",recognition: ");
      sb.Append(this.recognition== null ? "<null>" : this.recognition.ToString());
      sb.Append(",attributes: ");
      sb.Append(this.attributes== null ? "<null>" : this.attributes.ToString());
      sb.Append(",updateSequenceNum: ");
      sb.Append(this.updateSequenceNum);
      sb.Append(",alternateData: ");
      sb.Append(this.alternateData== null ? "<null>" : this.alternateData.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
