/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.Type
{

  [Serializable]
  public partial class ResourceAttributes : TBase
  {
    private string sourceURL;
    private long timestamp;
    private double latitude;
    private double longitude;
    private double altitude;
    private string cameraMake;
    private string cameraModel;
    private bool clientWillIndex;
    private string recoType;
    private string fileName;
    private bool attachment;

    public string SourceURL
    {
      get
      {
        return sourceURL;
      }
      set
      {
        __isset.sourceURL = true;
        this.sourceURL = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this.timestamp = value;
      }
    }

    public double Latitude
    {
      get
      {
        return latitude;
      }
      set
      {
        __isset.latitude = true;
        this.latitude = value;
      }
    }

    public double Longitude
    {
      get
      {
        return longitude;
      }
      set
      {
        __isset.longitude = true;
        this.longitude = value;
      }
    }

    public double Altitude
    {
      get
      {
        return altitude;
      }
      set
      {
        __isset.altitude = true;
        this.altitude = value;
      }
    }

    public string CameraMake
    {
      get
      {
        return cameraMake;
      }
      set
      {
        __isset.cameraMake = true;
        this.cameraMake = value;
      }
    }

    public string CameraModel
    {
      get
      {
        return cameraModel;
      }
      set
      {
        __isset.cameraModel = true;
        this.cameraModel = value;
      }
    }

    public bool ClientWillIndex
    {
      get
      {
        return clientWillIndex;
      }
      set
      {
        __isset.clientWillIndex = true;
        this.clientWillIndex = value;
      }
    }

    public string RecoType
    {
      get
      {
        return recoType;
      }
      set
      {
        __isset.recoType = true;
        this.recoType = value;
      }
    }

    public string FileName
    {
      get
      {
        return fileName;
      }
      set
      {
        __isset.fileName = true;
        this.fileName = value;
      }
    }

    public bool Attachment
    {
      get
      {
        return attachment;
      }
      set
      {
        __isset.attachment = true;
        this.attachment = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool sourceURL;
      public bool timestamp;
      public bool latitude;
      public bool longitude;
      public bool altitude;
      public bool cameraMake;
      public bool cameraModel;
      public bool clientWillIndex;
      public bool recoType;
      public bool fileName;
      public bool attachment;
    }

    public ResourceAttributes() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.sourceURL = iprot.ReadString();
              this.__isset.sourceURL = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              this.timestamp = iprot.ReadI64();
              this.__isset.timestamp = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              this.latitude = iprot.ReadDouble();
              this.__isset.latitude = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              this.longitude = iprot.ReadDouble();
              this.__isset.longitude = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              this.altitude = iprot.ReadDouble();
              this.__isset.altitude = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              this.cameraMake = iprot.ReadString();
              this.__isset.cameraMake = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              this.cameraModel = iprot.ReadString();
              this.__isset.cameraModel = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              this.clientWillIndex = iprot.ReadBool();
              this.__isset.clientWillIndex = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              this.recoType = iprot.ReadString();
              this.__isset.recoType = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              this.fileName = iprot.ReadString();
              this.__isset.fileName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              this.attachment = iprot.ReadBool();
              this.__isset.attachment = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResourceAttributes");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.sourceURL != null && __isset.sourceURL) {
        field.Name = "sourceURL";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.sourceURL);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.latitude) {
        field.Name = "latitude";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(this.latitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.longitude) {
        field.Name = "longitude";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(this.longitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.altitude) {
        field.Name = "altitude";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(this.altitude);
        oprot.WriteFieldEnd();
      }
      if (this.cameraMake != null && __isset.cameraMake) {
        field.Name = "cameraMake";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.cameraMake);
        oprot.WriteFieldEnd();
      }
      if (this.cameraModel != null && __isset.cameraModel) {
        field.Name = "cameraModel";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.cameraModel);
        oprot.WriteFieldEnd();
      }
      if (__isset.clientWillIndex) {
        field.Name = "clientWillIndex";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.clientWillIndex);
        oprot.WriteFieldEnd();
      }
      if (this.recoType != null && __isset.recoType) {
        field.Name = "recoType";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.recoType);
        oprot.WriteFieldEnd();
      }
      if (this.fileName != null && __isset.fileName) {
        field.Name = "fileName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.fileName);
        oprot.WriteFieldEnd();
      }
      if (__isset.attachment) {
        field.Name = "attachment";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.attachment);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResourceAttributes(");
      sb.Append("sourceURL: ");
      sb.Append(this.sourceURL);
      sb.Append(",timestamp: ");
      sb.Append(this.timestamp);
      sb.Append(",latitude: ");
      sb.Append(this.latitude);
      sb.Append(",longitude: ");
      sb.Append(this.longitude);
      sb.Append(",altitude: ");
      sb.Append(this.altitude);
      sb.Append(",cameraMake: ");
      sb.Append(this.cameraMake);
      sb.Append(",cameraModel: ");
      sb.Append(this.cameraModel);
      sb.Append(",clientWillIndex: ");
      sb.Append(this.clientWillIndex);
      sb.Append(",recoType: ");
      sb.Append(this.recoType);
      sb.Append(",fileName: ");
      sb.Append(this.fileName);
      sb.Append(",attachment: ");
      sb.Append(this.attachment);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
