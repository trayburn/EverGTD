/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.Type
{

  [Serializable]
  public partial class User : TBase
  {
    private int id;
    private string username;
    private string email;
    private string name;
    private string timezone;
    private PrivilegeLevel privilege;
    private long created;
    private long updated;
    private long deleted;
    private bool active;
    private string shardId;
    private UserAttributes attributes;
    private Accounting accounting;

    public int Id
    {
      get
      {
        return id;
      }
      set
      {
        __isset.id = true;
        this.id = value;
      }
    }

    public string Username
    {
      get
      {
        return username;
      }
      set
      {
        __isset.username = true;
        this.username = value;
      }
    }

    public string Email
    {
      get
      {
        return email;
      }
      set
      {
        __isset.email = true;
        this.email = value;
      }
    }

    public string Name
    {
      get
      {
        return name;
      }
      set
      {
        __isset.name = true;
        this.name = value;
      }
    }

    public string Timezone
    {
      get
      {
        return timezone;
      }
      set
      {
        __isset.timezone = true;
        this.timezone = value;
      }
    }

    public PrivilegeLevel Privilege
    {
      get
      {
        return privilege;
      }
      set
      {
        __isset.privilege = true;
        this.privilege = value;
      }
    }

    public long Created
    {
      get
      {
        return created;
      }
      set
      {
        __isset.created = true;
        this.created = value;
      }
    }

    public long Updated
    {
      get
      {
        return updated;
      }
      set
      {
        __isset.updated = true;
        this.updated = value;
      }
    }

    public long Deleted
    {
      get
      {
        return deleted;
      }
      set
      {
        __isset.deleted = true;
        this.deleted = value;
      }
    }

    public bool Active
    {
      get
      {
        return active;
      }
      set
      {
        __isset.active = true;
        this.active = value;
      }
    }

    public string ShardId
    {
      get
      {
        return shardId;
      }
      set
      {
        __isset.shardId = true;
        this.shardId = value;
      }
    }

    public UserAttributes Attributes
    {
      get
      {
        return attributes;
      }
      set
      {
        __isset.attributes = true;
        this.attributes = value;
      }
    }

    public Accounting Accounting
    {
      get
      {
        return accounting;
      }
      set
      {
        __isset.accounting = true;
        this.accounting = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool username;
      public bool email;
      public bool name;
      public bool timezone;
      public bool privilege;
      public bool created;
      public bool updated;
      public bool deleted;
      public bool active;
      public bool shardId;
      public bool attributes;
      public bool accounting;
    }

    public User() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.id = iprot.ReadI32();
              this.__isset.id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.username = iprot.ReadString();
              this.__isset.username = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              this.email = iprot.ReadString();
              this.__isset.email = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              this.name = iprot.ReadString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              this.timezone = iprot.ReadString();
              this.__isset.timezone = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              this.privilege = (PrivilegeLevel)iprot.ReadI32();
              this.__isset.privilege = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              this.created = iprot.ReadI64();
              this.__isset.created = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              this.updated = iprot.ReadI64();
              this.__isset.updated = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              this.deleted = iprot.ReadI64();
              this.__isset.deleted = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              this.active = iprot.ReadBool();
              this.__isset.active = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              this.shardId = iprot.ReadString();
              this.__isset.shardId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Struct) {
              this.attributes = new UserAttributes();
              this.attributes.Read(iprot);
              this.__isset.attributes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Struct) {
              this.accounting = new Accounting();
              this.accounting.Read(iprot);
              this.__isset.accounting = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("User");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.id);
        oprot.WriteFieldEnd();
      }
      if (this.username != null && __isset.username) {
        field.Name = "username";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.username);
        oprot.WriteFieldEnd();
      }
      if (this.email != null && __isset.email) {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.email);
        oprot.WriteFieldEnd();
      }
      if (this.name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.name);
        oprot.WriteFieldEnd();
      }
      if (this.timezone != null && __isset.timezone) {
        field.Name = "timezone";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.timezone);
        oprot.WriteFieldEnd();
      }
      if (__isset.privilege) {
        field.Name = "privilege";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.privilege);
        oprot.WriteFieldEnd();
      }
      if (__isset.created) {
        field.Name = "created";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.created);
        oprot.WriteFieldEnd();
      }
      if (__isset.updated) {
        field.Name = "updated";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.updated);
        oprot.WriteFieldEnd();
      }
      if (__isset.deleted) {
        field.Name = "deleted";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.deleted);
        oprot.WriteFieldEnd();
      }
      if (__isset.active) {
        field.Name = "active";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.active);
        oprot.WriteFieldEnd();
      }
      if (this.shardId != null && __isset.shardId) {
        field.Name = "shardId";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.shardId);
        oprot.WriteFieldEnd();
      }
      if (this.attributes != null && __isset.attributes) {
        field.Name = "attributes";
        field.Type = TType.Struct;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        this.attributes.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.accounting != null && __isset.accounting) {
        field.Name = "accounting";
        field.Type = TType.Struct;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        this.accounting.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("User(");
      sb.Append("id: ");
      sb.Append(this.id);
      sb.Append(",username: ");
      sb.Append(this.username);
      sb.Append(",email: ");
      sb.Append(this.email);
      sb.Append(",name: ");
      sb.Append(this.name);
      sb.Append(",timezone: ");
      sb.Append(this.timezone);
      sb.Append(",privilege: ");
      sb.Append(this.privilege);
      sb.Append(",created: ");
      sb.Append(this.created);
      sb.Append(",updated: ");
      sb.Append(this.updated);
      sb.Append(",deleted: ");
      sb.Append(this.deleted);
      sb.Append(",active: ");
      sb.Append(this.active);
      sb.Append(",shardId: ");
      sb.Append(this.shardId);
      sb.Append(",attributes: ");
      sb.Append(this.attributes== null ? "<null>" : this.attributes.ToString());
      sb.Append(",accounting: ");
      sb.Append(this.accounting== null ? "<null>" : this.accounting.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
