/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.NoteStore
{
  public class NoteStore {
    public interface Iface {
      SyncState getSyncState(string authenticationToken);
      SyncChunk getSyncChunk(string authenticationToken, int afterUSN, int maxEntries);
      List<Evernote.EDAM.Type.Notebook> listNotebooks(string authenticationToken);
      Evernote.EDAM.Type.Notebook getNotebook(string authenticationToken, string guid);
      Evernote.EDAM.Type.Notebook getDefaultNotebook(string authenticationToken);
      Evernote.EDAM.Type.Notebook createNotebook(string authenticationToken, Evernote.EDAM.Type.Notebook notebook);
      int updateNotebook(string authenticationToken, Evernote.EDAM.Type.Notebook notebook);
      int expungeNotebook(string authenticationToken, string guid);
      List<Evernote.EDAM.Type.Tag> listTags(string authenticationToken);
      List<Evernote.EDAM.Type.Tag> listTagsByNotebook(string authenticationToken, string notebookGuid);
      Evernote.EDAM.Type.Tag getTag(string authenticationToken, string guid);
      Evernote.EDAM.Type.Tag createTag(string authenticationToken, Evernote.EDAM.Type.Tag tag);
      int updateTag(string authenticationToken, Evernote.EDAM.Type.Tag tag);
      void untagAll(string authenticationToken, string guid);
      int expungeTag(string authenticationToken, string guid);
      List<Evernote.EDAM.Type.SavedSearch> listSearches(string authenticationToken);
      Evernote.EDAM.Type.SavedSearch getSearch(string authenticationToken, string guid);
      Evernote.EDAM.Type.SavedSearch createSearch(string authenticationToken, Evernote.EDAM.Type.SavedSearch search);
      int updateSearch(string authenticationToken, Evernote.EDAM.Type.SavedSearch search);
      int expungeSearch(string authenticationToken, string guid);
      NoteList findNotes(string authenticationToken, NoteFilter filter, int offset, int maxNotes);
      NoteCollectionCounts findNoteCounts(string authenticationToken, NoteFilter filter);
      Evernote.EDAM.Type.Note getNote(string authenticationToken, string guid, bool withContent);
      string getNoteContent(string authenticationToken, string guid);
      List<string> getNoteTagNames(string authenticationToken, string guid);
      Evernote.EDAM.Type.Note createNote(string authenticationToken, Evernote.EDAM.Type.Note note);
      Evernote.EDAM.Type.Note updateNote(string authenticationToken, Evernote.EDAM.Type.Note note);
      int expungeNote(string authenticationToken, string guid);
      int expungeNotes(string authenticationToken, List<string> noteGuids);
      int expungeInactiveNotes(string authenticationToken);
      Evernote.EDAM.Type.Note copyNote(string authenticationToken, string noteGuid, string toNotebookGuid);
      Evernote.EDAM.Type.Resource getResource(string authenticationToken, string guid, bool withData, bool withRecognition, bool withAttributes);
      int updateResource(string authenticationToken, Evernote.EDAM.Type.Resource resource);
      byte[] getResourceData(string authenticationToken, string guid);
      Evernote.EDAM.Type.Resource getResourceByHash(string authenticationToken, string noteGuid, byte[] contentHash, bool withData, bool withRecognition);
      byte[] getResourceRecognition(string authenticationToken, string guid);
      byte[] getResourceAlternateData(string authenticationToken, string guid);
      Evernote.EDAM.Type.ResourceAttributes getResourceAttributes(string authenticationToken, string guid);
      long getAccountSize(string authenticationToken);
      List<Evernote.EDAM.Type.Ad> getAds(string authenticationToken, AdParameters adParameters);
      Evernote.EDAM.Type.Ad getRandomAd(string authenticationToken, AdParameters adParameters);
      Evernote.EDAM.Type.Notebook getPublicNotebook(int userId, string publicUri);
      Evernote.EDAM.Type.SharedNotebook createSharedNotebook(string authenticationToken, Evernote.EDAM.Type.SharedNotebook sharedNotebook);
      List<Evernote.EDAM.Type.SharedNotebook> listSharedNotebooks(string authenticationToken);
      int expungeSharedNotebooks(string authenticationToken, List<long> sharedNotebookIds);
      Evernote.EDAM.Type.LinkedNotebook createLinkedNotebook(string authenticationToken, Evernote.EDAM.Type.LinkedNotebook linkedNotebook);
      Evernote.EDAM.Type.LinkedNotebook updateLinkedNotebook(string authenticationToken, Evernote.EDAM.Type.LinkedNotebook linkedNotebook);
      List<Evernote.EDAM.Type.LinkedNotebook> listLinkedNotebooks(string authenticationToken);
      int expungeLinkedNotebook(string authenticationToken, long linkedNotebookId);
      Evernote.EDAM.UserStore.AuthenticationResult authenticateToSharedNotebook(string shareKey, string authenticationToken);
      Evernote.EDAM.Type.SharedNotebook getSharedNotebookByAuth(string authenticationToken);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public SyncState getSyncState(string authenticationToken)
      {
        send_getSyncState(authenticationToken);
        return recv_getSyncState();
      }

      public void send_getSyncState(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("getSyncState", TMessageType.Call, seqid_));
        getSyncState_args args = new getSyncState_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public SyncState recv_getSyncState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSyncState_result result = new getSyncState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSyncState failed: unknown result");
      }

      public SyncChunk getSyncChunk(string authenticationToken, int afterUSN, int maxEntries)
      {
        send_getSyncChunk(authenticationToken, afterUSN, maxEntries);
        return recv_getSyncChunk();
      }

      public void send_getSyncChunk(string authenticationToken, int afterUSN, int maxEntries)
      {
        oprot_.WriteMessageBegin(new TMessage("getSyncChunk", TMessageType.Call, seqid_));
        getSyncChunk_args args = new getSyncChunk_args();
        args.AuthenticationToken = authenticationToken;
        args.AfterUSN = afterUSN;
        args.MaxEntries = maxEntries;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public SyncChunk recv_getSyncChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSyncChunk_result result = new getSyncChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSyncChunk failed: unknown result");
      }

      public List<Evernote.EDAM.Type.Notebook> listNotebooks(string authenticationToken)
      {
        send_listNotebooks(authenticationToken);
        return recv_listNotebooks();
      }

      public void send_listNotebooks(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("listNotebooks", TMessageType.Call, seqid_));
        listNotebooks_args args = new listNotebooks_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Evernote.EDAM.Type.Notebook> recv_listNotebooks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listNotebooks_result result = new listNotebooks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listNotebooks failed: unknown result");
      }

      public Evernote.EDAM.Type.Notebook getNotebook(string authenticationToken, string guid)
      {
        send_getNotebook(authenticationToken, guid);
        return recv_getNotebook();
      }

      public void send_getNotebook(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getNotebook", TMessageType.Call, seqid_));
        getNotebook_args args = new getNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Notebook recv_getNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNotebook_result result = new getNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotebook failed: unknown result");
      }

      public Evernote.EDAM.Type.Notebook getDefaultNotebook(string authenticationToken)
      {
        send_getDefaultNotebook(authenticationToken);
        return recv_getDefaultNotebook();
      }

      public void send_getDefaultNotebook(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("getDefaultNotebook", TMessageType.Call, seqid_));
        getDefaultNotebook_args args = new getDefaultNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Notebook recv_getDefaultNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDefaultNotebook_result result = new getDefaultNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDefaultNotebook failed: unknown result");
      }

      public Evernote.EDAM.Type.Notebook createNotebook(string authenticationToken, Evernote.EDAM.Type.Notebook notebook)
      {
        send_createNotebook(authenticationToken, notebook);
        return recv_createNotebook();
      }

      public void send_createNotebook(string authenticationToken, Evernote.EDAM.Type.Notebook notebook)
      {
        oprot_.WriteMessageBegin(new TMessage("createNotebook", TMessageType.Call, seqid_));
        createNotebook_args args = new createNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.Notebook = notebook;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Notebook recv_createNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createNotebook_result result = new createNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createNotebook failed: unknown result");
      }

      public int updateNotebook(string authenticationToken, Evernote.EDAM.Type.Notebook notebook)
      {
        send_updateNotebook(authenticationToken, notebook);
        return recv_updateNotebook();
      }

      public void send_updateNotebook(string authenticationToken, Evernote.EDAM.Type.Notebook notebook)
      {
        oprot_.WriteMessageBegin(new TMessage("updateNotebook", TMessageType.Call, seqid_));
        updateNotebook_args args = new updateNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.Notebook = notebook;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_updateNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateNotebook_result result = new updateNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateNotebook failed: unknown result");
      }

      public int expungeNotebook(string authenticationToken, string guid)
      {
        send_expungeNotebook(authenticationToken, guid);
        return recv_expungeNotebook();
      }

      public void send_expungeNotebook(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("expungeNotebook", TMessageType.Call, seqid_));
        expungeNotebook_args args = new expungeNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_expungeNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        expungeNotebook_result result = new expungeNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeNotebook failed: unknown result");
      }

      public List<Evernote.EDAM.Type.Tag> listTags(string authenticationToken)
      {
        send_listTags(authenticationToken);
        return recv_listTags();
      }

      public void send_listTags(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("listTags", TMessageType.Call, seqid_));
        listTags_args args = new listTags_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Evernote.EDAM.Type.Tag> recv_listTags()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listTags_result result = new listTags_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTags failed: unknown result");
      }

      public List<Evernote.EDAM.Type.Tag> listTagsByNotebook(string authenticationToken, string notebookGuid)
      {
        send_listTagsByNotebook(authenticationToken, notebookGuid);
        return recv_listTagsByNotebook();
      }

      public void send_listTagsByNotebook(string authenticationToken, string notebookGuid)
      {
        oprot_.WriteMessageBegin(new TMessage("listTagsByNotebook", TMessageType.Call, seqid_));
        listTagsByNotebook_args args = new listTagsByNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.NotebookGuid = notebookGuid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Evernote.EDAM.Type.Tag> recv_listTagsByNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listTagsByNotebook_result result = new listTagsByNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTagsByNotebook failed: unknown result");
      }

      public Evernote.EDAM.Type.Tag getTag(string authenticationToken, string guid)
      {
        send_getTag(authenticationToken, guid);
        return recv_getTag();
      }

      public void send_getTag(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getTag", TMessageType.Call, seqid_));
        getTag_args args = new getTag_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Tag recv_getTag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTag_result result = new getTag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTag failed: unknown result");
      }

      public Evernote.EDAM.Type.Tag createTag(string authenticationToken, Evernote.EDAM.Type.Tag tag)
      {
        send_createTag(authenticationToken, tag);
        return recv_createTag();
      }

      public void send_createTag(string authenticationToken, Evernote.EDAM.Type.Tag tag)
      {
        oprot_.WriteMessageBegin(new TMessage("createTag", TMessageType.Call, seqid_));
        createTag_args args = new createTag_args();
        args.AuthenticationToken = authenticationToken;
        args.Tag = tag;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Tag recv_createTag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createTag_result result = new createTag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTag failed: unknown result");
      }

      public int updateTag(string authenticationToken, Evernote.EDAM.Type.Tag tag)
      {
        send_updateTag(authenticationToken, tag);
        return recv_updateTag();
      }

      public void send_updateTag(string authenticationToken, Evernote.EDAM.Type.Tag tag)
      {
        oprot_.WriteMessageBegin(new TMessage("updateTag", TMessageType.Call, seqid_));
        updateTag_args args = new updateTag_args();
        args.AuthenticationToken = authenticationToken;
        args.Tag = tag;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_updateTag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateTag_result result = new updateTag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateTag failed: unknown result");
      }

      public void untagAll(string authenticationToken, string guid)
      {
        send_untagAll(authenticationToken, guid);
        recv_untagAll();
      }

      public void send_untagAll(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("untagAll", TMessageType.Call, seqid_));
        untagAll_args args = new untagAll_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_untagAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        untagAll_result result = new untagAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        return;
      }

      public int expungeTag(string authenticationToken, string guid)
      {
        send_expungeTag(authenticationToken, guid);
        return recv_expungeTag();
      }

      public void send_expungeTag(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("expungeTag", TMessageType.Call, seqid_));
        expungeTag_args args = new expungeTag_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_expungeTag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        expungeTag_result result = new expungeTag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeTag failed: unknown result");
      }

      public List<Evernote.EDAM.Type.SavedSearch> listSearches(string authenticationToken)
      {
        send_listSearches(authenticationToken);
        return recv_listSearches();
      }

      public void send_listSearches(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("listSearches", TMessageType.Call, seqid_));
        listSearches_args args = new listSearches_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Evernote.EDAM.Type.SavedSearch> recv_listSearches()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listSearches_result result = new listSearches_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSearches failed: unknown result");
      }

      public Evernote.EDAM.Type.SavedSearch getSearch(string authenticationToken, string guid)
      {
        send_getSearch(authenticationToken, guid);
        return recv_getSearch();
      }

      public void send_getSearch(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getSearch", TMessageType.Call, seqid_));
        getSearch_args args = new getSearch_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.SavedSearch recv_getSearch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSearch_result result = new getSearch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSearch failed: unknown result");
      }

      public Evernote.EDAM.Type.SavedSearch createSearch(string authenticationToken, Evernote.EDAM.Type.SavedSearch search)
      {
        send_createSearch(authenticationToken, search);
        return recv_createSearch();
      }

      public void send_createSearch(string authenticationToken, Evernote.EDAM.Type.SavedSearch search)
      {
        oprot_.WriteMessageBegin(new TMessage("createSearch", TMessageType.Call, seqid_));
        createSearch_args args = new createSearch_args();
        args.AuthenticationToken = authenticationToken;
        args.Search = search;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.SavedSearch recv_createSearch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createSearch_result result = new createSearch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSearch failed: unknown result");
      }

      public int updateSearch(string authenticationToken, Evernote.EDAM.Type.SavedSearch search)
      {
        send_updateSearch(authenticationToken, search);
        return recv_updateSearch();
      }

      public void send_updateSearch(string authenticationToken, Evernote.EDAM.Type.SavedSearch search)
      {
        oprot_.WriteMessageBegin(new TMessage("updateSearch", TMessageType.Call, seqid_));
        updateSearch_args args = new updateSearch_args();
        args.AuthenticationToken = authenticationToken;
        args.Search = search;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_updateSearch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSearch_result result = new updateSearch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSearch failed: unknown result");
      }

      public int expungeSearch(string authenticationToken, string guid)
      {
        send_expungeSearch(authenticationToken, guid);
        return recv_expungeSearch();
      }

      public void send_expungeSearch(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("expungeSearch", TMessageType.Call, seqid_));
        expungeSearch_args args = new expungeSearch_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_expungeSearch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        expungeSearch_result result = new expungeSearch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeSearch failed: unknown result");
      }

      public NoteList findNotes(string authenticationToken, NoteFilter filter, int offset, int maxNotes)
      {
        send_findNotes(authenticationToken, filter, offset, maxNotes);
        return recv_findNotes();
      }

      public void send_findNotes(string authenticationToken, NoteFilter filter, int offset, int maxNotes)
      {
        oprot_.WriteMessageBegin(new TMessage("findNotes", TMessageType.Call, seqid_));
        findNotes_args args = new findNotes_args();
        args.AuthenticationToken = authenticationToken;
        args.Filter = filter;
        args.Offset = offset;
        args.MaxNotes = maxNotes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public NoteList recv_findNotes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findNotes_result result = new findNotes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findNotes failed: unknown result");
      }

      public NoteCollectionCounts findNoteCounts(string authenticationToken, NoteFilter filter)
      {
        send_findNoteCounts(authenticationToken, filter);
        return recv_findNoteCounts();
      }

      public void send_findNoteCounts(string authenticationToken, NoteFilter filter)
      {
        oprot_.WriteMessageBegin(new TMessage("findNoteCounts", TMessageType.Call, seqid_));
        findNoteCounts_args args = new findNoteCounts_args();
        args.AuthenticationToken = authenticationToken;
        args.Filter = filter;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public NoteCollectionCounts recv_findNoteCounts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findNoteCounts_result result = new findNoteCounts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findNoteCounts failed: unknown result");
      }

      public Evernote.EDAM.Type.Note getNote(string authenticationToken, string guid, bool withContent)
      {
        send_getNote(authenticationToken, guid, withContent);
        return recv_getNote();
      }

      public void send_getNote(string authenticationToken, string guid, bool withContent)
      {
        oprot_.WriteMessageBegin(new TMessage("getNote", TMessageType.Call, seqid_));
        getNote_args args = new getNote_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.WithContent = withContent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Note recv_getNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNote_result result = new getNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNote failed: unknown result");
      }

      public string getNoteContent(string authenticationToken, string guid)
      {
        send_getNoteContent(authenticationToken, guid);
        return recv_getNoteContent();
      }

      public void send_getNoteContent(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getNoteContent", TMessageType.Call, seqid_));
        getNoteContent_args args = new getNoteContent_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_getNoteContent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNoteContent_result result = new getNoteContent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteContent failed: unknown result");
      }

      public List<string> getNoteTagNames(string authenticationToken, string guid)
      {
        send_getNoteTagNames(authenticationToken, guid);
        return recv_getNoteTagNames();
      }

      public void send_getNoteTagNames(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getNoteTagNames", TMessageType.Call, seqid_));
        getNoteTagNames_args args = new getNoteTagNames_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_getNoteTagNames()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNoteTagNames_result result = new getNoteTagNames_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteTagNames failed: unknown result");
      }

      public Evernote.EDAM.Type.Note createNote(string authenticationToken, Evernote.EDAM.Type.Note note)
      {
        send_createNote(authenticationToken, note);
        return recv_createNote();
      }

      public void send_createNote(string authenticationToken, Evernote.EDAM.Type.Note note)
      {
        oprot_.WriteMessageBegin(new TMessage("createNote", TMessageType.Call, seqid_));
        createNote_args args = new createNote_args();
        args.AuthenticationToken = authenticationToken;
        args.Note = note;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Note recv_createNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createNote_result result = new createNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createNote failed: unknown result");
      }

      public Evernote.EDAM.Type.Note updateNote(string authenticationToken, Evernote.EDAM.Type.Note note)
      {
        send_updateNote(authenticationToken, note);
        return recv_updateNote();
      }

      public void send_updateNote(string authenticationToken, Evernote.EDAM.Type.Note note)
      {
        oprot_.WriteMessageBegin(new TMessage("updateNote", TMessageType.Call, seqid_));
        updateNote_args args = new updateNote_args();
        args.AuthenticationToken = authenticationToken;
        args.Note = note;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Note recv_updateNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateNote_result result = new updateNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateNote failed: unknown result");
      }

      public int expungeNote(string authenticationToken, string guid)
      {
        send_expungeNote(authenticationToken, guid);
        return recv_expungeNote();
      }

      public void send_expungeNote(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("expungeNote", TMessageType.Call, seqid_));
        expungeNote_args args = new expungeNote_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_expungeNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        expungeNote_result result = new expungeNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeNote failed: unknown result");
      }

      public int expungeNotes(string authenticationToken, List<string> noteGuids)
      {
        send_expungeNotes(authenticationToken, noteGuids);
        return recv_expungeNotes();
      }

      public void send_expungeNotes(string authenticationToken, List<string> noteGuids)
      {
        oprot_.WriteMessageBegin(new TMessage("expungeNotes", TMessageType.Call, seqid_));
        expungeNotes_args args = new expungeNotes_args();
        args.AuthenticationToken = authenticationToken;
        args.NoteGuids = noteGuids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_expungeNotes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        expungeNotes_result result = new expungeNotes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeNotes failed: unknown result");
      }

      public int expungeInactiveNotes(string authenticationToken)
      {
        send_expungeInactiveNotes(authenticationToken);
        return recv_expungeInactiveNotes();
      }

      public void send_expungeInactiveNotes(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.Call, seqid_));
        expungeInactiveNotes_args args = new expungeInactiveNotes_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_expungeInactiveNotes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        expungeInactiveNotes_result result = new expungeInactiveNotes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeInactiveNotes failed: unknown result");
      }

      public Evernote.EDAM.Type.Note copyNote(string authenticationToken, string noteGuid, string toNotebookGuid)
      {
        send_copyNote(authenticationToken, noteGuid, toNotebookGuid);
        return recv_copyNote();
      }

      public void send_copyNote(string authenticationToken, string noteGuid, string toNotebookGuid)
      {
        oprot_.WriteMessageBegin(new TMessage("copyNote", TMessageType.Call, seqid_));
        copyNote_args args = new copyNote_args();
        args.AuthenticationToken = authenticationToken;
        args.NoteGuid = noteGuid;
        args.ToNotebookGuid = toNotebookGuid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Note recv_copyNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        copyNote_result result = new copyNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "copyNote failed: unknown result");
      }

      public Evernote.EDAM.Type.Resource getResource(string authenticationToken, string guid, bool withData, bool withRecognition, bool withAttributes)
      {
        send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes);
        return recv_getResource();
      }

      public void send_getResource(string authenticationToken, string guid, bool withData, bool withRecognition, bool withAttributes)
      {
        oprot_.WriteMessageBegin(new TMessage("getResource", TMessageType.Call, seqid_));
        getResource_args args = new getResource_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.WithData = withData;
        args.WithRecognition = withRecognition;
        args.WithAttributes = withAttributes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Resource recv_getResource()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getResource_result result = new getResource_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResource failed: unknown result");
      }

      public int updateResource(string authenticationToken, Evernote.EDAM.Type.Resource resource)
      {
        send_updateResource(authenticationToken, resource);
        return recv_updateResource();
      }

      public void send_updateResource(string authenticationToken, Evernote.EDAM.Type.Resource resource)
      {
        oprot_.WriteMessageBegin(new TMessage("updateResource", TMessageType.Call, seqid_));
        updateResource_args args = new updateResource_args();
        args.AuthenticationToken = authenticationToken;
        args.Resource = resource;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_updateResource()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateResource_result result = new updateResource_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateResource failed: unknown result");
      }

      public byte[] getResourceData(string authenticationToken, string guid)
      {
        send_getResourceData(authenticationToken, guid);
        return recv_getResourceData();
      }

      public void send_getResourceData(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getResourceData", TMessageType.Call, seqid_));
        getResourceData_args args = new getResourceData_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_getResourceData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getResourceData_result result = new getResourceData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceData failed: unknown result");
      }

      public Evernote.EDAM.Type.Resource getResourceByHash(string authenticationToken, string noteGuid, byte[] contentHash, bool withData, bool withRecognition)
      {
        send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition);
        return recv_getResourceByHash();
      }

      public void send_getResourceByHash(string authenticationToken, string noteGuid, byte[] contentHash, bool withData, bool withRecognition)
      {
        oprot_.WriteMessageBegin(new TMessage("getResourceByHash", TMessageType.Call, seqid_));
        getResourceByHash_args args = new getResourceByHash_args();
        args.AuthenticationToken = authenticationToken;
        args.NoteGuid = noteGuid;
        args.ContentHash = contentHash;
        args.WithData = withData;
        args.WithRecognition = withRecognition;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Resource recv_getResourceByHash()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getResourceByHash_result result = new getResourceByHash_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceByHash failed: unknown result");
      }

      public byte[] getResourceRecognition(string authenticationToken, string guid)
      {
        send_getResourceRecognition(authenticationToken, guid);
        return recv_getResourceRecognition();
      }

      public void send_getResourceRecognition(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getResourceRecognition", TMessageType.Call, seqid_));
        getResourceRecognition_args args = new getResourceRecognition_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_getResourceRecognition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getResourceRecognition_result result = new getResourceRecognition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceRecognition failed: unknown result");
      }

      public byte[] getResourceAlternateData(string authenticationToken, string guid)
      {
        send_getResourceAlternateData(authenticationToken, guid);
        return recv_getResourceAlternateData();
      }

      public void send_getResourceAlternateData(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getResourceAlternateData", TMessageType.Call, seqid_));
        getResourceAlternateData_args args = new getResourceAlternateData_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_getResourceAlternateData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getResourceAlternateData_result result = new getResourceAlternateData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceAlternateData failed: unknown result");
      }

      public Evernote.EDAM.Type.ResourceAttributes getResourceAttributes(string authenticationToken, string guid)
      {
        send_getResourceAttributes(authenticationToken, guid);
        return recv_getResourceAttributes();
      }

      public void send_getResourceAttributes(string authenticationToken, string guid)
      {
        oprot_.WriteMessageBegin(new TMessage("getResourceAttributes", TMessageType.Call, seqid_));
        getResourceAttributes_args args = new getResourceAttributes_args();
        args.AuthenticationToken = authenticationToken;
        args.Guid = guid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.ResourceAttributes recv_getResourceAttributes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getResourceAttributes_result result = new getResourceAttributes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceAttributes failed: unknown result");
      }

      public long getAccountSize(string authenticationToken)
      {
        send_getAccountSize(authenticationToken);
        return recv_getAccountSize();
      }

      public void send_getAccountSize(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("getAccountSize", TMessageType.Call, seqid_));
        getAccountSize_args args = new getAccountSize_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_getAccountSize()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAccountSize_result result = new getAccountSize_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAccountSize failed: unknown result");
      }

      public List<Evernote.EDAM.Type.Ad> getAds(string authenticationToken, AdParameters adParameters)
      {
        send_getAds(authenticationToken, adParameters);
        return recv_getAds();
      }

      public void send_getAds(string authenticationToken, AdParameters adParameters)
      {
        oprot_.WriteMessageBegin(new TMessage("getAds", TMessageType.Call, seqid_));
        getAds_args args = new getAds_args();
        args.AuthenticationToken = authenticationToken;
        args.AdParameters = adParameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Evernote.EDAM.Type.Ad> recv_getAds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAds_result result = new getAds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAds failed: unknown result");
      }

      public Evernote.EDAM.Type.Ad getRandomAd(string authenticationToken, AdParameters adParameters)
      {
        send_getRandomAd(authenticationToken, adParameters);
        return recv_getRandomAd();
      }

      public void send_getRandomAd(string authenticationToken, AdParameters adParameters)
      {
        oprot_.WriteMessageBegin(new TMessage("getRandomAd", TMessageType.Call, seqid_));
        getRandomAd_args args = new getRandomAd_args();
        args.AuthenticationToken = authenticationToken;
        args.AdParameters = adParameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Ad recv_getRandomAd()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRandomAd_result result = new getRandomAd_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRandomAd failed: unknown result");
      }

      public Evernote.EDAM.Type.Notebook getPublicNotebook(int userId, string publicUri)
      {
        send_getPublicNotebook(userId, publicUri);
        return recv_getPublicNotebook();
      }

      public void send_getPublicNotebook(int userId, string publicUri)
      {
        oprot_.WriteMessageBegin(new TMessage("getPublicNotebook", TMessageType.Call, seqid_));
        getPublicNotebook_args args = new getPublicNotebook_args();
        args.UserId = userId;
        args.PublicUri = publicUri;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.Notebook recv_getPublicNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPublicNotebook_result result = new getPublicNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPublicNotebook failed: unknown result");
      }

      public Evernote.EDAM.Type.SharedNotebook createSharedNotebook(string authenticationToken, Evernote.EDAM.Type.SharedNotebook sharedNotebook)
      {
        send_createSharedNotebook(authenticationToken, sharedNotebook);
        return recv_createSharedNotebook();
      }

      public void send_createSharedNotebook(string authenticationToken, Evernote.EDAM.Type.SharedNotebook sharedNotebook)
      {
        oprot_.WriteMessageBegin(new TMessage("createSharedNotebook", TMessageType.Call, seqid_));
        createSharedNotebook_args args = new createSharedNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.SharedNotebook = sharedNotebook;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.SharedNotebook recv_createSharedNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createSharedNotebook_result result = new createSharedNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSharedNotebook failed: unknown result");
      }

      public List<Evernote.EDAM.Type.SharedNotebook> listSharedNotebooks(string authenticationToken)
      {
        send_listSharedNotebooks(authenticationToken);
        return recv_listSharedNotebooks();
      }

      public void send_listSharedNotebooks(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("listSharedNotebooks", TMessageType.Call, seqid_));
        listSharedNotebooks_args args = new listSharedNotebooks_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Evernote.EDAM.Type.SharedNotebook> recv_listSharedNotebooks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listSharedNotebooks_result result = new listSharedNotebooks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSharedNotebooks failed: unknown result");
      }

      public int expungeSharedNotebooks(string authenticationToken, List<long> sharedNotebookIds)
      {
        send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds);
        return recv_expungeSharedNotebooks();
      }

      public void send_expungeSharedNotebooks(string authenticationToken, List<long> sharedNotebookIds)
      {
        oprot_.WriteMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.Call, seqid_));
        expungeSharedNotebooks_args args = new expungeSharedNotebooks_args();
        args.AuthenticationToken = authenticationToken;
        args.SharedNotebookIds = sharedNotebookIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_expungeSharedNotebooks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        expungeSharedNotebooks_result result = new expungeSharedNotebooks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeSharedNotebooks failed: unknown result");
      }

      public Evernote.EDAM.Type.LinkedNotebook createLinkedNotebook(string authenticationToken, Evernote.EDAM.Type.LinkedNotebook linkedNotebook)
      {
        send_createLinkedNotebook(authenticationToken, linkedNotebook);
        return recv_createLinkedNotebook();
      }

      public void send_createLinkedNotebook(string authenticationToken, Evernote.EDAM.Type.LinkedNotebook linkedNotebook)
      {
        oprot_.WriteMessageBegin(new TMessage("createLinkedNotebook", TMessageType.Call, seqid_));
        createLinkedNotebook_args args = new createLinkedNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.LinkedNotebook = linkedNotebook;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.LinkedNotebook recv_createLinkedNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createLinkedNotebook_result result = new createLinkedNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createLinkedNotebook failed: unknown result");
      }

      public Evernote.EDAM.Type.LinkedNotebook updateLinkedNotebook(string authenticationToken, Evernote.EDAM.Type.LinkedNotebook linkedNotebook)
      {
        send_updateLinkedNotebook(authenticationToken, linkedNotebook);
        return recv_updateLinkedNotebook();
      }

      public void send_updateLinkedNotebook(string authenticationToken, Evernote.EDAM.Type.LinkedNotebook linkedNotebook)
      {
        oprot_.WriteMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.Call, seqid_));
        updateLinkedNotebook_args args = new updateLinkedNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.LinkedNotebook = linkedNotebook;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.LinkedNotebook recv_updateLinkedNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateLinkedNotebook_result result = new updateLinkedNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateLinkedNotebook failed: unknown result");
      }

      public List<Evernote.EDAM.Type.LinkedNotebook> listLinkedNotebooks(string authenticationToken)
      {
        send_listLinkedNotebooks(authenticationToken);
        return recv_listLinkedNotebooks();
      }

      public void send_listLinkedNotebooks(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.Call, seqid_));
        listLinkedNotebooks_args args = new listLinkedNotebooks_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Evernote.EDAM.Type.LinkedNotebook> recv_listLinkedNotebooks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listLinkedNotebooks_result result = new listLinkedNotebooks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listLinkedNotebooks failed: unknown result");
      }

      public int expungeLinkedNotebook(string authenticationToken, long linkedNotebookId)
      {
        send_expungeLinkedNotebook(authenticationToken, linkedNotebookId);
        return recv_expungeLinkedNotebook();
      }

      public void send_expungeLinkedNotebook(string authenticationToken, long linkedNotebookId)
      {
        oprot_.WriteMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.Call, seqid_));
        expungeLinkedNotebook_args args = new expungeLinkedNotebook_args();
        args.AuthenticationToken = authenticationToken;
        args.LinkedNotebookId = linkedNotebookId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_expungeLinkedNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        expungeLinkedNotebook_result result = new expungeLinkedNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeLinkedNotebook failed: unknown result");
      }

      public Evernote.EDAM.UserStore.AuthenticationResult authenticateToSharedNotebook(string shareKey, string authenticationToken)
      {
        send_authenticateToSharedNotebook(shareKey, authenticationToken);
        return recv_authenticateToSharedNotebook();
      }

      public void send_authenticateToSharedNotebook(string shareKey, string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.Call, seqid_));
        authenticateToSharedNotebook_args args = new authenticateToSharedNotebook_args();
        args.ShareKey = shareKey;
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.UserStore.AuthenticationResult recv_authenticateToSharedNotebook()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        authenticateToSharedNotebook_result result = new authenticateToSharedNotebook_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticateToSharedNotebook failed: unknown result");
      }

      public Evernote.EDAM.Type.SharedNotebook getSharedNotebookByAuth(string authenticationToken)
      {
        send_getSharedNotebookByAuth(authenticationToken);
        return recv_getSharedNotebookByAuth();
      }

      public void send_getSharedNotebookByAuth(string authenticationToken)
      {
        oprot_.WriteMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.Call, seqid_));
        getSharedNotebookByAuth_args args = new getSharedNotebookByAuth_args();
        args.AuthenticationToken = authenticationToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Evernote.EDAM.Type.SharedNotebook recv_getSharedNotebookByAuth()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSharedNotebookByAuth_result result = new getSharedNotebookByAuth_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.userException) {
          throw result.UserException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.systemException) {
          throw result.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSharedNotebookByAuth failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getSyncState"] = getSyncState_Process;
        processMap_["getSyncChunk"] = getSyncChunk_Process;
        processMap_["listNotebooks"] = listNotebooks_Process;
        processMap_["getNotebook"] = getNotebook_Process;
        processMap_["getDefaultNotebook"] = getDefaultNotebook_Process;
        processMap_["createNotebook"] = createNotebook_Process;
        processMap_["updateNotebook"] = updateNotebook_Process;
        processMap_["expungeNotebook"] = expungeNotebook_Process;
        processMap_["listTags"] = listTags_Process;
        processMap_["listTagsByNotebook"] = listTagsByNotebook_Process;
        processMap_["getTag"] = getTag_Process;
        processMap_["createTag"] = createTag_Process;
        processMap_["updateTag"] = updateTag_Process;
        processMap_["untagAll"] = untagAll_Process;
        processMap_["expungeTag"] = expungeTag_Process;
        processMap_["listSearches"] = listSearches_Process;
        processMap_["getSearch"] = getSearch_Process;
        processMap_["createSearch"] = createSearch_Process;
        processMap_["updateSearch"] = updateSearch_Process;
        processMap_["expungeSearch"] = expungeSearch_Process;
        processMap_["findNotes"] = findNotes_Process;
        processMap_["findNoteCounts"] = findNoteCounts_Process;
        processMap_["getNote"] = getNote_Process;
        processMap_["getNoteContent"] = getNoteContent_Process;
        processMap_["getNoteTagNames"] = getNoteTagNames_Process;
        processMap_["createNote"] = createNote_Process;
        processMap_["updateNote"] = updateNote_Process;
        processMap_["expungeNote"] = expungeNote_Process;
        processMap_["expungeNotes"] = expungeNotes_Process;
        processMap_["expungeInactiveNotes"] = expungeInactiveNotes_Process;
        processMap_["copyNote"] = copyNote_Process;
        processMap_["getResource"] = getResource_Process;
        processMap_["updateResource"] = updateResource_Process;
        processMap_["getResourceData"] = getResourceData_Process;
        processMap_["getResourceByHash"] = getResourceByHash_Process;
        processMap_["getResourceRecognition"] = getResourceRecognition_Process;
        processMap_["getResourceAlternateData"] = getResourceAlternateData_Process;
        processMap_["getResourceAttributes"] = getResourceAttributes_Process;
        processMap_["getAccountSize"] = getAccountSize_Process;
        processMap_["getAds"] = getAds_Process;
        processMap_["getRandomAd"] = getRandomAd_Process;
        processMap_["getPublicNotebook"] = getPublicNotebook_Process;
        processMap_["createSharedNotebook"] = createSharedNotebook_Process;
        processMap_["listSharedNotebooks"] = listSharedNotebooks_Process;
        processMap_["expungeSharedNotebooks"] = expungeSharedNotebooks_Process;
        processMap_["createLinkedNotebook"] = createLinkedNotebook_Process;
        processMap_["updateLinkedNotebook"] = updateLinkedNotebook_Process;
        processMap_["listLinkedNotebooks"] = listLinkedNotebooks_Process;
        processMap_["expungeLinkedNotebook"] = expungeLinkedNotebook_Process;
        processMap_["authenticateToSharedNotebook"] = authenticateToSharedNotebook_Process;
        processMap_["getSharedNotebookByAuth"] = getSharedNotebookByAuth_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getSyncState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSyncState_args args = new getSyncState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSyncState_result result = new getSyncState_result();
        try {
          result.Success = iface_.getSyncState(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("getSyncState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSyncChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSyncChunk_args args = new getSyncChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSyncChunk_result result = new getSyncChunk_result();
        try {
          result.Success = iface_.getSyncChunk(args.AuthenticationToken, args.AfterUSN, args.MaxEntries);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("getSyncChunk", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listNotebooks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listNotebooks_args args = new listNotebooks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listNotebooks_result result = new listNotebooks_result();
        try {
          result.Success = iface_.listNotebooks(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("listNotebooks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNotebook_args args = new getNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNotebook_result result = new getNotebook_result();
        try {
          result.Success = iface_.getNotebook(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDefaultNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDefaultNotebook_args args = new getDefaultNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDefaultNotebook_result result = new getDefaultNotebook_result();
        try {
          result.Success = iface_.getDefaultNotebook(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("getDefaultNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createNotebook_args args = new createNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createNotebook_result result = new createNotebook_result();
        try {
          result.Success = iface_.createNotebook(args.AuthenticationToken, args.Notebook);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("createNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateNotebook_args args = new updateNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateNotebook_result result = new updateNotebook_result();
        try {
          result.Success = iface_.updateNotebook(args.AuthenticationToken, args.Notebook);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("updateNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void expungeNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        expungeNotebook_args args = new expungeNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        expungeNotebook_result result = new expungeNotebook_result();
        try {
          result.Success = iface_.expungeNotebook(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("expungeNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listTags_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listTags_args args = new listTags_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listTags_result result = new listTags_result();
        try {
          result.Success = iface_.listTags(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("listTags", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listTagsByNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listTagsByNotebook_args args = new listTagsByNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listTagsByNotebook_result result = new listTagsByNotebook_result();
        try {
          result.Success = iface_.listTagsByNotebook(args.AuthenticationToken, args.NotebookGuid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("listTagsByNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTag_args args = new getTag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTag_result result = new getTag_result();
        try {
          result.Success = iface_.getTag(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createTag_args args = new createTag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createTag_result result = new createTag_result();
        try {
          result.Success = iface_.createTag(args.AuthenticationToken, args.Tag);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("createTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateTag_args args = new updateTag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateTag_result result = new updateTag_result();
        try {
          result.Success = iface_.updateTag(args.AuthenticationToken, args.Tag);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("updateTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void untagAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        untagAll_args args = new untagAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        untagAll_result result = new untagAll_result();
        try {
          iface_.untagAll(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("untagAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void expungeTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        expungeTag_args args = new expungeTag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        expungeTag_result result = new expungeTag_result();
        try {
          result.Success = iface_.expungeTag(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("expungeTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listSearches_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listSearches_args args = new listSearches_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listSearches_result result = new listSearches_result();
        try {
          result.Success = iface_.listSearches(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("listSearches", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSearch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSearch_args args = new getSearch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSearch_result result = new getSearch_result();
        try {
          result.Success = iface_.getSearch(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getSearch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createSearch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createSearch_args args = new createSearch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createSearch_result result = new createSearch_result();
        try {
          result.Success = iface_.createSearch(args.AuthenticationToken, args.Search);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("createSearch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSearch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSearch_args args = new updateSearch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSearch_result result = new updateSearch_result();
        try {
          result.Success = iface_.updateSearch(args.AuthenticationToken, args.Search);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("updateSearch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void expungeSearch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        expungeSearch_args args = new expungeSearch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        expungeSearch_result result = new expungeSearch_result();
        try {
          result.Success = iface_.expungeSearch(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("expungeSearch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findNotes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findNotes_args args = new findNotes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findNotes_result result = new findNotes_result();
        try {
          result.Success = iface_.findNotes(args.AuthenticationToken, args.Filter, args.Offset, args.MaxNotes);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("findNotes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findNoteCounts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findNoteCounts_args args = new findNoteCounts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findNoteCounts_result result = new findNoteCounts_result();
        try {
          result.Success = iface_.findNoteCounts(args.AuthenticationToken, args.Filter);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("findNoteCounts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNote_args args = new getNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNote_result result = new getNote_result();
        try {
          result.Success = iface_.getNote(args.AuthenticationToken, args.Guid, args.WithContent);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNoteContent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNoteContent_args args = new getNoteContent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNoteContent_result result = new getNoteContent_result();
        try {
          result.Success = iface_.getNoteContent(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getNoteContent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNoteTagNames_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNoteTagNames_args args = new getNoteTagNames_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNoteTagNames_result result = new getNoteTagNames_result();
        try {
          result.Success = iface_.getNoteTagNames(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getNoteTagNames", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createNote_args args = new createNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createNote_result result = new createNote_result();
        try {
          result.Success = iface_.createNote(args.AuthenticationToken, args.Note);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("createNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateNote_args args = new updateNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateNote_result result = new updateNote_result();
        try {
          result.Success = iface_.updateNote(args.AuthenticationToken, args.Note);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("updateNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void expungeNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        expungeNote_args args = new expungeNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        expungeNote_result result = new expungeNote_result();
        try {
          result.Success = iface_.expungeNote(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("expungeNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void expungeNotes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        expungeNotes_args args = new expungeNotes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        expungeNotes_result result = new expungeNotes_result();
        try {
          result.Success = iface_.expungeNotes(args.AuthenticationToken, args.NoteGuids);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("expungeNotes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void expungeInactiveNotes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        expungeInactiveNotes_args args = new expungeInactiveNotes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        expungeInactiveNotes_result result = new expungeInactiveNotes_result();
        try {
          result.Success = iface_.expungeInactiveNotes(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void copyNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        copyNote_args args = new copyNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        copyNote_result result = new copyNote_result();
        try {
          result.Success = iface_.copyNote(args.AuthenticationToken, args.NoteGuid, args.ToNotebookGuid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("copyNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getResource_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getResource_args args = new getResource_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getResource_result result = new getResource_result();
        try {
          result.Success = iface_.getResource(args.AuthenticationToken, args.Guid, args.WithData, args.WithRecognition, args.WithAttributes);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getResource", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateResource_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateResource_args args = new updateResource_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateResource_result result = new updateResource_result();
        try {
          result.Success = iface_.updateResource(args.AuthenticationToken, args.Resource);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("updateResource", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getResourceData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getResourceData_args args = new getResourceData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getResourceData_result result = new getResourceData_result();
        try {
          result.Success = iface_.getResourceData(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getResourceData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getResourceByHash_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getResourceByHash_args args = new getResourceByHash_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getResourceByHash_result result = new getResourceByHash_result();
        try {
          result.Success = iface_.getResourceByHash(args.AuthenticationToken, args.NoteGuid, args.ContentHash, args.WithData, args.WithRecognition);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getResourceByHash", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getResourceRecognition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getResourceRecognition_args args = new getResourceRecognition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getResourceRecognition_result result = new getResourceRecognition_result();
        try {
          result.Success = iface_.getResourceRecognition(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getResourceRecognition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getResourceAlternateData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getResourceAlternateData_args args = new getResourceAlternateData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getResourceAlternateData_result result = new getResourceAlternateData_result();
        try {
          result.Success = iface_.getResourceAlternateData(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getResourceAlternateData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getResourceAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getResourceAttributes_args args = new getResourceAttributes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getResourceAttributes_result result = new getResourceAttributes_result();
        try {
          result.Success = iface_.getResourceAttributes(args.AuthenticationToken, args.Guid);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getResourceAttributes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAccountSize_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAccountSize_args args = new getAccountSize_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAccountSize_result result = new getAccountSize_result();
        try {
          result.Success = iface_.getAccountSize(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("getAccountSize", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAds_args args = new getAds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAds_result result = new getAds_result();
        try {
          result.Success = iface_.getAds(args.AuthenticationToken, args.AdParameters);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("getAds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRandomAd_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRandomAd_args args = new getRandomAd_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRandomAd_result result = new getRandomAd_result();
        try {
          result.Success = iface_.getRandomAd(args.AuthenticationToken, args.AdParameters);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("getRandomAd", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPublicNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPublicNotebook_args args = new getPublicNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPublicNotebook_result result = new getPublicNotebook_result();
        try {
          result.Success = iface_.getPublicNotebook(args.UserId, args.PublicUri);
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("getPublicNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createSharedNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createSharedNotebook_args args = new createSharedNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createSharedNotebook_result result = new createSharedNotebook_result();
        try {
          result.Success = iface_.createSharedNotebook(args.AuthenticationToken, args.SharedNotebook);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("createSharedNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listSharedNotebooks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listSharedNotebooks_args args = new listSharedNotebooks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listSharedNotebooks_result result = new listSharedNotebooks_result();
        try {
          result.Success = iface_.listSharedNotebooks(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("listSharedNotebooks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void expungeSharedNotebooks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        expungeSharedNotebooks_args args = new expungeSharedNotebooks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        expungeSharedNotebooks_result result = new expungeSharedNotebooks_result();
        try {
          result.Success = iface_.expungeSharedNotebooks(args.AuthenticationToken, args.SharedNotebookIds);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createLinkedNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createLinkedNotebook_args args = new createLinkedNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createLinkedNotebook_result result = new createLinkedNotebook_result();
        try {
          result.Success = iface_.createLinkedNotebook(args.AuthenticationToken, args.LinkedNotebook);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("createLinkedNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateLinkedNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateLinkedNotebook_args args = new updateLinkedNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateLinkedNotebook_result result = new updateLinkedNotebook_result();
        try {
          result.Success = iface_.updateLinkedNotebook(args.AuthenticationToken, args.LinkedNotebook);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listLinkedNotebooks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listLinkedNotebooks_args args = new listLinkedNotebooks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listLinkedNotebooks_result result = new listLinkedNotebooks_result();
        try {
          result.Success = iface_.listLinkedNotebooks(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void expungeLinkedNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        expungeLinkedNotebook_args args = new expungeLinkedNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        expungeLinkedNotebook_result result = new expungeLinkedNotebook_result();
        try {
          result.Success = iface_.expungeLinkedNotebook(args.AuthenticationToken, args.LinkedNotebookId);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void authenticateToSharedNotebook_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        authenticateToSharedNotebook_args args = new authenticateToSharedNotebook_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        authenticateToSharedNotebook_result result = new authenticateToSharedNotebook_result();
        try {
          result.Success = iface_.authenticateToSharedNotebook(args.ShareKey, args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSharedNotebookByAuth_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSharedNotebookByAuth_args args = new getSharedNotebookByAuth_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSharedNotebookByAuth_result result = new getSharedNotebookByAuth_result();
        try {
          result.Success = iface_.getSharedNotebookByAuth(args.AuthenticationToken);
        } catch (Evernote.EDAM.Error.EDAMUserException userException) {
          result.UserException = userException;
        } catch (Evernote.EDAM.Error.EDAMNotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (Evernote.EDAM.Error.EDAMSystemException systemException) {
          result.SystemException = systemException;
        }
        oprot.WriteMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class getSyncState_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public getSyncState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSyncState_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSyncState_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSyncState_result : TBase
    {
      private SyncState success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public SyncState Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public getSyncState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new SyncState();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSyncState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSyncState_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSyncChunk_args : TBase
    {
      private string authenticationToken;
      private int afterUSN;
      private int maxEntries;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public int AfterUSN
      {
        get
        {
          return afterUSN;
        }
        set
        {
          __isset.afterUSN = true;
          this.afterUSN = value;
        }
      }

      public int MaxEntries
      {
        get
        {
          return maxEntries;
        }
        set
        {
          __isset.maxEntries = true;
          this.maxEntries = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool afterUSN;
        public bool maxEntries;
      }

      public getSyncChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                this.afterUSN = iprot.ReadI32();
                this.__isset.afterUSN = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                this.maxEntries = iprot.ReadI32();
                this.__isset.maxEntries = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSyncChunk_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (__isset.afterUSN) {
          field.Name = "afterUSN";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.afterUSN);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxEntries) {
          field.Name = "maxEntries";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.maxEntries);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSyncChunk_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",afterUSN: ");
        sb.Append(this.afterUSN);
        sb.Append(",maxEntries: ");
        sb.Append(this.maxEntries);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSyncChunk_result : TBase
    {
      private SyncChunk success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public SyncChunk Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public getSyncChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new SyncChunk();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSyncChunk_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSyncChunk_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listNotebooks_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public listNotebooks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listNotebooks_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listNotebooks_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listNotebooks_result : TBase
    {
      private List<Evernote.EDAM.Type.Notebook> success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public List<Evernote.EDAM.Type.Notebook> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public listNotebooks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<Evernote.EDAM.Type.Notebook>();
                  TList _list66 = iprot.ReadListBegin();
                  for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                  {
                    Evernote.EDAM.Type.Notebook _elem68 = new Evernote.EDAM.Type.Notebook();
                    _elem68 = new Evernote.EDAM.Type.Notebook();
                    _elem68.Read(iprot);
                    this.success.Add(_elem68);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listNotebooks_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (Evernote.EDAM.Type.Notebook _iter69 in this.success)
              {
                _iter69.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listNotebooks_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNotebook_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNotebook_result : TBase
    {
      private Evernote.EDAM.Type.Notebook success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Notebook Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Notebook();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getDefaultNotebook_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public getDefaultNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDefaultNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDefaultNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getDefaultNotebook_result : TBase
    {
      private Evernote.EDAM.Type.Notebook success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.Type.Notebook Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public getDefaultNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Notebook();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDefaultNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDefaultNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createNotebook_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.Notebook notebook;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.Notebook Notebook
      {
        get
        {
          return notebook;
        }
        set
        {
          __isset.notebook = true;
          this.notebook = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool notebook;
      }

      public createNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notebook = new Evernote.EDAM.Type.Notebook();
                this.notebook.Read(iprot);
                this.__isset.notebook = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.notebook != null && __isset.notebook) {
          field.Name = "notebook";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.notebook.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",notebook: ");
        sb.Append(this.notebook== null ? "<null>" : this.notebook.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createNotebook_result : TBase
    {
      private Evernote.EDAM.Type.Notebook success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.Type.Notebook Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public createNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Notebook();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateNotebook_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.Notebook notebook;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.Notebook Notebook
      {
        get
        {
          return notebook;
        }
        set
        {
          __isset.notebook = true;
          this.notebook = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool notebook;
      }

      public updateNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notebook = new Evernote.EDAM.Type.Notebook();
                this.notebook.Read(iprot);
                this.__isset.notebook = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.notebook != null && __isset.notebook) {
          field.Name = "notebook";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.notebook.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",notebook: ");
        sb.Append(this.notebook== null ? "<null>" : this.notebook.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateNotebook_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public updateNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeNotebook_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public expungeNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeNotebook_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public expungeNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTags_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public listTags_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTags_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTags_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTags_result : TBase
    {
      private List<Evernote.EDAM.Type.Tag> success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public List<Evernote.EDAM.Type.Tag> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public listTags_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<Evernote.EDAM.Type.Tag>();
                  TList _list70 = iprot.ReadListBegin();
                  for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                  {
                    Evernote.EDAM.Type.Tag _elem72 = new Evernote.EDAM.Type.Tag();
                    _elem72 = new Evernote.EDAM.Type.Tag();
                    _elem72.Read(iprot);
                    this.success.Add(_elem72);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTags_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (Evernote.EDAM.Type.Tag _iter73 in this.success)
              {
                _iter73.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTags_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTagsByNotebook_args : TBase
    {
      private string authenticationToken;
      private string notebookGuid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string NotebookGuid
      {
        get
        {
          return notebookGuid;
        }
        set
        {
          __isset.notebookGuid = true;
          this.notebookGuid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool notebookGuid;
      }

      public listTagsByNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.notebookGuid = iprot.ReadString();
                this.__isset.notebookGuid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTagsByNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.notebookGuid != null && __isset.notebookGuid) {
          field.Name = "notebookGuid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.notebookGuid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTagsByNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",notebookGuid: ");
        sb.Append(this.notebookGuid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTagsByNotebook_result : TBase
    {
      private List<Evernote.EDAM.Type.Tag> success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public List<Evernote.EDAM.Type.Tag> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public listTagsByNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<Evernote.EDAM.Type.Tag>();
                  TList _list74 = iprot.ReadListBegin();
                  for( int _i75 = 0; _i75 < _list74.Count; ++_i75)
                  {
                    Evernote.EDAM.Type.Tag _elem76 = new Evernote.EDAM.Type.Tag();
                    _elem76 = new Evernote.EDAM.Type.Tag();
                    _elem76.Read(iprot);
                    this.success.Add(_elem76);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTagsByNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (Evernote.EDAM.Type.Tag _iter77 in this.success)
              {
                _iter77.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTagsByNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getTag_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getTag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTag_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getTag_result : TBase
    {
      private Evernote.EDAM.Type.Tag success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Tag Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getTag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Tag();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTag_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createTag_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.Tag tag;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.Tag Tag
      {
        get
        {
          return tag;
        }
        set
        {
          __isset.tag = true;
          this.tag = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool tag;
      }

      public createTag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.tag = new Evernote.EDAM.Type.Tag();
                this.tag.Read(iprot);
                this.__isset.tag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.tag != null && __isset.tag) {
          field.Name = "tag";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.tag.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createTag_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",tag: ");
        sb.Append(this.tag== null ? "<null>" : this.tag.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createTag_result : TBase
    {
      private Evernote.EDAM.Type.Tag success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Tag Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public createTag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Tag();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createTag_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateTag_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.Tag tag;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.Tag Tag
      {
        get
        {
          return tag;
        }
        set
        {
          __isset.tag = true;
          this.tag = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool tag;
      }

      public updateTag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.tag = new Evernote.EDAM.Type.Tag();
                this.tag.Read(iprot);
                this.__isset.tag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.tag != null && __isset.tag) {
          field.Name = "tag";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.tag.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateTag_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",tag: ");
        sb.Append(this.tag== null ? "<null>" : this.tag.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateTag_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public updateTag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateTag_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class untagAll_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public untagAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("untagAll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("untagAll_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class untagAll_result : TBase
    {
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public untagAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("untagAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("untagAll_result(");
        sb.Append("userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeTag_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public expungeTag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeTag_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeTag_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public expungeTag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeTag_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listSearches_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public listSearches_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listSearches_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listSearches_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listSearches_result : TBase
    {
      private List<Evernote.EDAM.Type.SavedSearch> success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public List<Evernote.EDAM.Type.SavedSearch> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public listSearches_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<Evernote.EDAM.Type.SavedSearch>();
                  TList _list78 = iprot.ReadListBegin();
                  for( int _i79 = 0; _i79 < _list78.Count; ++_i79)
                  {
                    Evernote.EDAM.Type.SavedSearch _elem80 = new Evernote.EDAM.Type.SavedSearch();
                    _elem80 = new Evernote.EDAM.Type.SavedSearch();
                    _elem80.Read(iprot);
                    this.success.Add(_elem80);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listSearches_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (Evernote.EDAM.Type.SavedSearch _iter81 in this.success)
              {
                _iter81.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listSearches_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSearch_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getSearch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSearch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSearch_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSearch_result : TBase
    {
      private Evernote.EDAM.Type.SavedSearch success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.SavedSearch Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getSearch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.SavedSearch();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSearch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSearch_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createSearch_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.SavedSearch search;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.SavedSearch Search
      {
        get
        {
          return search;
        }
        set
        {
          __isset.search = true;
          this.search = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool search;
      }

      public createSearch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.search = new Evernote.EDAM.Type.SavedSearch();
                this.search.Read(iprot);
                this.__isset.search = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSearch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.search != null && __isset.search) {
          field.Name = "search";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.search.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSearch_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",search: ");
        sb.Append(this.search== null ? "<null>" : this.search.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createSearch_result : TBase
    {
      private Evernote.EDAM.Type.SavedSearch success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.Type.SavedSearch Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public createSearch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.SavedSearch();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSearch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSearch_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateSearch_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.SavedSearch search;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.SavedSearch Search
      {
        get
        {
          return search;
        }
        set
        {
          __isset.search = true;
          this.search = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool search;
      }

      public updateSearch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.search = new Evernote.EDAM.Type.SavedSearch();
                this.search.Read(iprot);
                this.__isset.search = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSearch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.search != null && __isset.search) {
          field.Name = "search";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.search.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSearch_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",search: ");
        sb.Append(this.search== null ? "<null>" : this.search.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateSearch_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public updateSearch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSearch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSearch_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeSearch_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public expungeSearch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeSearch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeSearch_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeSearch_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public expungeSearch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeSearch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeSearch_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class findNotes_args : TBase
    {
      private string authenticationToken;
      private NoteFilter filter;
      private int offset;
      private int maxNotes;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public NoteFilter Filter
      {
        get
        {
          return filter;
        }
        set
        {
          __isset.filter = true;
          this.filter = value;
        }
      }

      public int Offset
      {
        get
        {
          return offset;
        }
        set
        {
          __isset.offset = true;
          this.offset = value;
        }
      }

      public int MaxNotes
      {
        get
        {
          return maxNotes;
        }
        set
        {
          __isset.maxNotes = true;
          this.maxNotes = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool filter;
        public bool offset;
        public bool maxNotes;
      }

      public findNotes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.filter = new NoteFilter();
                this.filter.Read(iprot);
                this.__isset.filter = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                this.offset = iprot.ReadI32();
                this.__isset.offset = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                this.maxNotes = iprot.ReadI32();
                this.__isset.maxNotes = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findNotes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.filter != null && __isset.filter) {
          field.Name = "filter";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.filter.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.offset) {
          field.Name = "offset";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.offset);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxNotes) {
          field.Name = "maxNotes";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.maxNotes);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findNotes_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",filter: ");
        sb.Append(this.filter== null ? "<null>" : this.filter.ToString());
        sb.Append(",offset: ");
        sb.Append(this.offset);
        sb.Append(",maxNotes: ");
        sb.Append(this.maxNotes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class findNotes_result : TBase
    {
      private NoteList success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public NoteList Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public findNotes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new NoteList();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findNotes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findNotes_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class findNoteCounts_args : TBase
    {
      private string authenticationToken;
      private NoteFilter filter;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public NoteFilter Filter
      {
        get
        {
          return filter;
        }
        set
        {
          __isset.filter = true;
          this.filter = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool filter;
      }

      public findNoteCounts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.filter = new NoteFilter();
                this.filter.Read(iprot);
                this.__isset.filter = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findNoteCounts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.filter != null && __isset.filter) {
          field.Name = "filter";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.filter.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findNoteCounts_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",filter: ");
        sb.Append(this.filter== null ? "<null>" : this.filter.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class findNoteCounts_result : TBase
    {
      private NoteCollectionCounts success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public NoteCollectionCounts Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public findNoteCounts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new NoteCollectionCounts();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findNoteCounts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findNoteCounts_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNote_args : TBase
    {
      private string authenticationToken;
      private string guid;
      private bool withContent;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }

      public bool WithContent
      {
        get
        {
          return withContent;
        }
        set
        {
          __isset.withContent = true;
          this.withContent = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
        public bool withContent;
      }

      public getNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                this.withContent = iprot.ReadBool();
                this.__isset.withContent = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNote_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        if (__isset.withContent) {
          field.Name = "withContent";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(this.withContent);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNote_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(",withContent: ");
        sb.Append(this.withContent);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNote_result : TBase
    {
      private Evernote.EDAM.Type.Note success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Note Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Note();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNote_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNote_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNoteContent_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getNoteContent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNoteContent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNoteContent_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNoteContent_result : TBase
    {
      private string success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public string Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getNoteContent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                this.success = iprot.ReadString();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNoteContent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(this.success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNoteContent_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNoteTagNames_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getNoteTagNames_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNoteTagNames_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNoteTagNames_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNoteTagNames_result : TBase
    {
      private List<string> success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public List<string> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getNoteTagNames_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<string>();
                  TList _list82 = iprot.ReadListBegin();
                  for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                  {
                    string _elem84 = null;
                    _elem84 = iprot.ReadString();
                    this.success.Add(_elem84);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNoteTagNames_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, this.success.Count));
              foreach (string _iter85 in this.success)
              {
                oprot.WriteString(_iter85);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNoteTagNames_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createNote_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.Note note;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.Note Note
      {
        get
        {
          return note;
        }
        set
        {
          __isset.note = true;
          this.note = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool note;
      }

      public createNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.note = new Evernote.EDAM.Type.Note();
                this.note.Read(iprot);
                this.__isset.note = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNote_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.note != null && __isset.note) {
          field.Name = "note";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.note.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createNote_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",note: ");
        sb.Append(this.note== null ? "<null>" : this.note.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createNote_result : TBase
    {
      private Evernote.EDAM.Type.Note success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Note Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public createNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Note();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNote_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createNote_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateNote_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.Note note;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.Note Note
      {
        get
        {
          return note;
        }
        set
        {
          __isset.note = true;
          this.note = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool note;
      }

      public updateNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.note = new Evernote.EDAM.Type.Note();
                this.note.Read(iprot);
                this.__isset.note = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateNote_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.note != null && __isset.note) {
          field.Name = "note";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.note.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateNote_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",note: ");
        sb.Append(this.note== null ? "<null>" : this.note.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateNote_result : TBase
    {
      private Evernote.EDAM.Type.Note success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Note Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public updateNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Note();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateNote_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateNote_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeNote_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public expungeNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeNote_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeNote_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeNote_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public expungeNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeNote_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeNote_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeNotes_args : TBase
    {
      private string authenticationToken;
      private List<string> noteGuids;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public List<string> NoteGuids
      {
        get
        {
          return noteGuids;
        }
        set
        {
          __isset.noteGuids = true;
          this.noteGuids = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool noteGuids;
      }

      public expungeNotes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  this.noteGuids = new List<string>();
                  TList _list86 = iprot.ReadListBegin();
                  for( int _i87 = 0; _i87 < _list86.Count; ++_i87)
                  {
                    string _elem88 = null;
                    _elem88 = iprot.ReadString();
                    this.noteGuids.Add(_elem88);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.noteGuids = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeNotes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.noteGuids != null && __isset.noteGuids) {
          field.Name = "noteGuids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, this.noteGuids.Count));
            foreach (string _iter89 in this.noteGuids)
            {
              oprot.WriteString(_iter89);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeNotes_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",noteGuids: ");
        sb.Append(this.noteGuids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeNotes_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public expungeNotes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeNotes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeNotes_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeInactiveNotes_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public expungeInactiveNotes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeInactiveNotes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeInactiveNotes_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeInactiveNotes_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public expungeInactiveNotes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeInactiveNotes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeInactiveNotes_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class copyNote_args : TBase
    {
      private string authenticationToken;
      private string noteGuid;
      private string toNotebookGuid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string NoteGuid
      {
        get
        {
          return noteGuid;
        }
        set
        {
          __isset.noteGuid = true;
          this.noteGuid = value;
        }
      }

      public string ToNotebookGuid
      {
        get
        {
          return toNotebookGuid;
        }
        set
        {
          __isset.toNotebookGuid = true;
          this.toNotebookGuid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool noteGuid;
        public bool toNotebookGuid;
      }

      public copyNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.noteGuid = iprot.ReadString();
                this.__isset.noteGuid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.toNotebookGuid = iprot.ReadString();
                this.__isset.toNotebookGuid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("copyNote_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.noteGuid != null && __isset.noteGuid) {
          field.Name = "noteGuid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.noteGuid);
          oprot.WriteFieldEnd();
        }
        if (this.toNotebookGuid != null && __isset.toNotebookGuid) {
          field.Name = "toNotebookGuid";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.toNotebookGuid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("copyNote_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",noteGuid: ");
        sb.Append(this.noteGuid);
        sb.Append(",toNotebookGuid: ");
        sb.Append(this.toNotebookGuid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class copyNote_result : TBase
    {
      private Evernote.EDAM.Type.Note success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Note Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public copyNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Note();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("copyNote_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("copyNote_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResource_args : TBase
    {
      private string authenticationToken;
      private string guid;
      private bool withData;
      private bool withRecognition;
      private bool withAttributes;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }

      public bool WithData
      {
        get
        {
          return withData;
        }
        set
        {
          __isset.withData = true;
          this.withData = value;
        }
      }

      public bool WithRecognition
      {
        get
        {
          return withRecognition;
        }
        set
        {
          __isset.withRecognition = true;
          this.withRecognition = value;
        }
      }

      public bool WithAttributes
      {
        get
        {
          return withAttributes;
        }
        set
        {
          __isset.withAttributes = true;
          this.withAttributes = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
        public bool withData;
        public bool withRecognition;
        public bool withAttributes;
      }

      public getResource_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                this.withData = iprot.ReadBool();
                this.__isset.withData = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                this.withRecognition = iprot.ReadBool();
                this.__isset.withRecognition = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                this.withAttributes = iprot.ReadBool();
                this.__isset.withAttributes = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResource_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        if (__isset.withData) {
          field.Name = "withData";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(this.withData);
          oprot.WriteFieldEnd();
        }
        if (__isset.withRecognition) {
          field.Name = "withRecognition";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(this.withRecognition);
          oprot.WriteFieldEnd();
        }
        if (__isset.withAttributes) {
          field.Name = "withAttributes";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(this.withAttributes);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResource_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(",withData: ");
        sb.Append(this.withData);
        sb.Append(",withRecognition: ");
        sb.Append(this.withRecognition);
        sb.Append(",withAttributes: ");
        sb.Append(this.withAttributes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResource_result : TBase
    {
      private Evernote.EDAM.Type.Resource success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Resource Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getResource_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Resource();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResource_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResource_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateResource_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.Resource resource;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.Resource Resource
      {
        get
        {
          return resource;
        }
        set
        {
          __isset.resource = true;
          this.resource = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool resource;
      }

      public updateResource_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.resource = new Evernote.EDAM.Type.Resource();
                this.resource.Read(iprot);
                this.__isset.resource = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateResource_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.resource != null && __isset.resource) {
          field.Name = "resource";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.resource.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateResource_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",resource: ");
        sb.Append(this.resource== null ? "<null>" : this.resource.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateResource_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public updateResource_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateResource_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateResource_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceData_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getResourceData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceData_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceData_result : TBase
    {
      private byte[] success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public byte[] Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getResourceData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                this.success = iprot.ReadBinary();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(this.success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceData_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceByHash_args : TBase
    {
      private string authenticationToken;
      private string noteGuid;
      private byte[] contentHash;
      private bool withData;
      private bool withRecognition;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string NoteGuid
      {
        get
        {
          return noteGuid;
        }
        set
        {
          __isset.noteGuid = true;
          this.noteGuid = value;
        }
      }

      public byte[] ContentHash
      {
        get
        {
          return contentHash;
        }
        set
        {
          __isset.contentHash = true;
          this.contentHash = value;
        }
      }

      public bool WithData
      {
        get
        {
          return withData;
        }
        set
        {
          __isset.withData = true;
          this.withData = value;
        }
      }

      public bool WithRecognition
      {
        get
        {
          return withRecognition;
        }
        set
        {
          __isset.withRecognition = true;
          this.withRecognition = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool noteGuid;
        public bool contentHash;
        public bool withData;
        public bool withRecognition;
      }

      public getResourceByHash_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.noteGuid = iprot.ReadString();
                this.__isset.noteGuid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.contentHash = iprot.ReadBinary();
                this.__isset.contentHash = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                this.withData = iprot.ReadBool();
                this.__isset.withData = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                this.withRecognition = iprot.ReadBool();
                this.__isset.withRecognition = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceByHash_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.noteGuid != null && __isset.noteGuid) {
          field.Name = "noteGuid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.noteGuid);
          oprot.WriteFieldEnd();
        }
        if (this.contentHash != null && __isset.contentHash) {
          field.Name = "contentHash";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.contentHash);
          oprot.WriteFieldEnd();
        }
        if (__isset.withData) {
          field.Name = "withData";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(this.withData);
          oprot.WriteFieldEnd();
        }
        if (__isset.withRecognition) {
          field.Name = "withRecognition";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(this.withRecognition);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceByHash_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",noteGuid: ");
        sb.Append(this.noteGuid);
        sb.Append(",contentHash: ");
        sb.Append(this.contentHash);
        sb.Append(",withData: ");
        sb.Append(this.withData);
        sb.Append(",withRecognition: ");
        sb.Append(this.withRecognition);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceByHash_result : TBase
    {
      private Evernote.EDAM.Type.Resource success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Resource Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getResourceByHash_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Resource();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceByHash_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceByHash_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceRecognition_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getResourceRecognition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceRecognition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceRecognition_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceRecognition_result : TBase
    {
      private byte[] success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public byte[] Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getResourceRecognition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                this.success = iprot.ReadBinary();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceRecognition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(this.success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceRecognition_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceAlternateData_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getResourceAlternateData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceAlternateData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceAlternateData_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceAlternateData_result : TBase
    {
      private byte[] success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public byte[] Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getResourceAlternateData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                this.success = iprot.ReadBinary();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceAlternateData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(this.success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceAlternateData_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceAttributes_args : TBase
    {
      private string authenticationToken;
      private string guid;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public string Guid
      {
        get
        {
          return guid;
        }
        set
        {
          __isset.guid = true;
          this.guid = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool guid;
      }

      public getResourceAttributes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.guid = iprot.ReadString();
                this.__isset.guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceAttributes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.guid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceAttributes_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",guid: ");
        sb.Append(this.guid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getResourceAttributes_result : TBase
    {
      private Evernote.EDAM.Type.ResourceAttributes success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.ResourceAttributes Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
        public bool notFoundException;
      }

      public getResourceAttributes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.ResourceAttributes();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getResourceAttributes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getResourceAttributes_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getAccountSize_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public getAccountSize_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAccountSize_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAccountSize_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getAccountSize_result : TBase
    {
      private long success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public long Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public getAccountSize_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                this.success = iprot.ReadI64();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAccountSize_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAccountSize_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getAds_args : TBase
    {
      private string authenticationToken;
      private AdParameters adParameters;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public AdParameters AdParameters
      {
        get
        {
          return adParameters;
        }
        set
        {
          __isset.adParameters = true;
          this.adParameters = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool adParameters;
      }

      public getAds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.adParameters = new AdParameters();
                this.adParameters.Read(iprot);
                this.__isset.adParameters = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.adParameters != null && __isset.adParameters) {
          field.Name = "adParameters";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.adParameters.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAds_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",adParameters: ");
        sb.Append(this.adParameters== null ? "<null>" : this.adParameters.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getAds_result : TBase
    {
      private List<Evernote.EDAM.Type.Ad> success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public List<Evernote.EDAM.Type.Ad> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public getAds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<Evernote.EDAM.Type.Ad>();
                  TList _list90 = iprot.ReadListBegin();
                  for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                  {
                    Evernote.EDAM.Type.Ad _elem92 = new Evernote.EDAM.Type.Ad();
                    _elem92 = new Evernote.EDAM.Type.Ad();
                    _elem92.Read(iprot);
                    this.success.Add(_elem92);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (Evernote.EDAM.Type.Ad _iter93 in this.success)
              {
                _iter93.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAds_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getRandomAd_args : TBase
    {
      private string authenticationToken;
      private AdParameters adParameters;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public AdParameters AdParameters
      {
        get
        {
          return adParameters;
        }
        set
        {
          __isset.adParameters = true;
          this.adParameters = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool adParameters;
      }

      public getRandomAd_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.adParameters = new AdParameters();
                this.adParameters.Read(iprot);
                this.__isset.adParameters = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRandomAd_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.adParameters != null && __isset.adParameters) {
          field.Name = "adParameters";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.adParameters.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRandomAd_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",adParameters: ");
        sb.Append(this.adParameters== null ? "<null>" : this.adParameters.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getRandomAd_result : TBase
    {
      private Evernote.EDAM.Type.Ad success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.Type.Ad Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool systemException;
      }

      public getRandomAd_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Ad();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRandomAd_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRandomAd_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getPublicNotebook_args : TBase
    {
      private int userId;
      private string publicUri;

      public int UserId
      {
        get
        {
          return userId;
        }
        set
        {
          __isset.userId = true;
          this.userId = value;
        }
      }

      public string PublicUri
      {
        get
        {
          return publicUri;
        }
        set
        {
          __isset.publicUri = true;
          this.publicUri = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool userId;
        public bool publicUri;
      }

      public getPublicNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                this.userId = iprot.ReadI32();
                this.__isset.userId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.publicUri = iprot.ReadString();
                this.__isset.publicUri = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPublicNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.userId);
          oprot.WriteFieldEnd();
        }
        if (this.publicUri != null && __isset.publicUri) {
          field.Name = "publicUri";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.publicUri);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPublicNotebook_args(");
        sb.Append("userId: ");
        sb.Append(this.userId);
        sb.Append(",publicUri: ");
        sb.Append(this.publicUri);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getPublicNotebook_result : TBase
    {
      private Evernote.EDAM.Type.Notebook success;
      private Evernote.EDAM.Error.EDAMSystemException systemException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;

      public Evernote.EDAM.Type.Notebook Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool systemException;
        public bool notFoundException;
      }

      public getPublicNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.Notebook();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPublicNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPublicNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createSharedNotebook_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.SharedNotebook sharedNotebook;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.SharedNotebook SharedNotebook
      {
        get
        {
          return sharedNotebook;
        }
        set
        {
          __isset.sharedNotebook = true;
          this.sharedNotebook = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool sharedNotebook;
      }

      public createSharedNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.sharedNotebook = new Evernote.EDAM.Type.SharedNotebook();
                this.sharedNotebook.Read(iprot);
                this.__isset.sharedNotebook = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSharedNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.sharedNotebook != null && __isset.sharedNotebook) {
          field.Name = "sharedNotebook";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.sharedNotebook.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSharedNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",sharedNotebook: ");
        sb.Append(this.sharedNotebook== null ? "<null>" : this.sharedNotebook.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createSharedNotebook_result : TBase
    {
      private Evernote.EDAM.Type.SharedNotebook success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.Type.SharedNotebook Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public createSharedNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.SharedNotebook();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSharedNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSharedNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listSharedNotebooks_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public listSharedNotebooks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listSharedNotebooks_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listSharedNotebooks_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listSharedNotebooks_result : TBase
    {
      private List<Evernote.EDAM.Type.SharedNotebook> success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public List<Evernote.EDAM.Type.SharedNotebook> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public listSharedNotebooks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<Evernote.EDAM.Type.SharedNotebook>();
                  TList _list94 = iprot.ReadListBegin();
                  for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
                  {
                    Evernote.EDAM.Type.SharedNotebook _elem96 = new Evernote.EDAM.Type.SharedNotebook();
                    _elem96 = new Evernote.EDAM.Type.SharedNotebook();
                    _elem96.Read(iprot);
                    this.success.Add(_elem96);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listSharedNotebooks_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (Evernote.EDAM.Type.SharedNotebook _iter97 in this.success)
              {
                _iter97.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listSharedNotebooks_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeSharedNotebooks_args : TBase
    {
      private string authenticationToken;
      private List<long> sharedNotebookIds;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public List<long> SharedNotebookIds
      {
        get
        {
          return sharedNotebookIds;
        }
        set
        {
          __isset.sharedNotebookIds = true;
          this.sharedNotebookIds = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool sharedNotebookIds;
      }

      public expungeSharedNotebooks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  this.sharedNotebookIds = new List<long>();
                  TList _list98 = iprot.ReadListBegin();
                  for( int _i99 = 0; _i99 < _list98.Count; ++_i99)
                  {
                    long _elem100 = 0;
                    _elem100 = iprot.ReadI64();
                    this.sharedNotebookIds.Add(_elem100);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.sharedNotebookIds = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeSharedNotebooks_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.sharedNotebookIds != null && __isset.sharedNotebookIds) {
          field.Name = "sharedNotebookIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, this.sharedNotebookIds.Count));
            foreach (long _iter101 in this.sharedNotebookIds)
            {
              oprot.WriteI64(_iter101);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeSharedNotebooks_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",sharedNotebookIds: ");
        sb.Append(this.sharedNotebookIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeSharedNotebooks_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public expungeSharedNotebooks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeSharedNotebooks_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeSharedNotebooks_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createLinkedNotebook_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.LinkedNotebook linkedNotebook;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.LinkedNotebook LinkedNotebook
      {
        get
        {
          return linkedNotebook;
        }
        set
        {
          __isset.linkedNotebook = true;
          this.linkedNotebook = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool linkedNotebook;
      }

      public createLinkedNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.linkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();
                this.linkedNotebook.Read(iprot);
                this.__isset.linkedNotebook = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createLinkedNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.linkedNotebook != null && __isset.linkedNotebook) {
          field.Name = "linkedNotebook";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.linkedNotebook.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createLinkedNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",linkedNotebook: ");
        sb.Append(this.linkedNotebook== null ? "<null>" : this.linkedNotebook.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createLinkedNotebook_result : TBase
    {
      private Evernote.EDAM.Type.LinkedNotebook success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.Type.LinkedNotebook Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public createLinkedNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.LinkedNotebook();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createLinkedNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createLinkedNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateLinkedNotebook_args : TBase
    {
      private string authenticationToken;
      private Evernote.EDAM.Type.LinkedNotebook linkedNotebook;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public Evernote.EDAM.Type.LinkedNotebook LinkedNotebook
      {
        get
        {
          return linkedNotebook;
        }
        set
        {
          __isset.linkedNotebook = true;
          this.linkedNotebook = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool linkedNotebook;
      }

      public updateLinkedNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.linkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();
                this.linkedNotebook.Read(iprot);
                this.__isset.linkedNotebook = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateLinkedNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (this.linkedNotebook != null && __isset.linkedNotebook) {
          field.Name = "linkedNotebook";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.linkedNotebook.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateLinkedNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",linkedNotebook: ");
        sb.Append(this.linkedNotebook== null ? "<null>" : this.linkedNotebook.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateLinkedNotebook_result : TBase
    {
      private Evernote.EDAM.Type.LinkedNotebook success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.Type.LinkedNotebook Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public updateLinkedNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.LinkedNotebook();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateLinkedNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateLinkedNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listLinkedNotebooks_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public listLinkedNotebooks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listLinkedNotebooks_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listLinkedNotebooks_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listLinkedNotebooks_result : TBase
    {
      private List<Evernote.EDAM.Type.LinkedNotebook> success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public List<Evernote.EDAM.Type.LinkedNotebook> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public listLinkedNotebooks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<Evernote.EDAM.Type.LinkedNotebook>();
                  TList _list102 = iprot.ReadListBegin();
                  for( int _i103 = 0; _i103 < _list102.Count; ++_i103)
                  {
                    Evernote.EDAM.Type.LinkedNotebook _elem104 = new Evernote.EDAM.Type.LinkedNotebook();
                    _elem104 = new Evernote.EDAM.Type.LinkedNotebook();
                    _elem104.Read(iprot);
                    this.success.Add(_elem104);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listLinkedNotebooks_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (Evernote.EDAM.Type.LinkedNotebook _iter105 in this.success)
              {
                _iter105.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listLinkedNotebooks_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeLinkedNotebook_args : TBase
    {
      private string authenticationToken;
      private long linkedNotebookId;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }

      public long LinkedNotebookId
      {
        get
        {
          return linkedNotebookId;
        }
        set
        {
          __isset.linkedNotebookId = true;
          this.linkedNotebookId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
        public bool linkedNotebookId;
      }

      public expungeLinkedNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                this.linkedNotebookId = iprot.ReadI64();
                this.__isset.linkedNotebookId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeLinkedNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        if (__isset.linkedNotebookId) {
          field.Name = "linkedNotebookId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(this.linkedNotebookId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeLinkedNotebook_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(",linkedNotebookId: ");
        sb.Append(this.linkedNotebookId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class expungeLinkedNotebook_result : TBase
    {
      private int success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public expungeLinkedNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("expungeLinkedNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("expungeLinkedNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class authenticateToSharedNotebook_args : TBase
    {
      private string shareKey;
      private string authenticationToken;

      public string ShareKey
      {
        get
        {
          return shareKey;
        }
        set
        {
          __isset.shareKey = true;
          this.shareKey = value;
        }
      }

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool shareKey;
        public bool authenticationToken;
      }

      public authenticateToSharedNotebook_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.shareKey = iprot.ReadString();
                this.__isset.shareKey = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("authenticateToSharedNotebook_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.shareKey != null && __isset.shareKey) {
          field.Name = "shareKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.shareKey);
          oprot.WriteFieldEnd();
        }
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("authenticateToSharedNotebook_args(");
        sb.Append("shareKey: ");
        sb.Append(this.shareKey);
        sb.Append(",authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class authenticateToSharedNotebook_result : TBase
    {
      private Evernote.EDAM.UserStore.AuthenticationResult success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.UserStore.AuthenticationResult Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public authenticateToSharedNotebook_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.UserStore.AuthenticationResult();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("authenticateToSharedNotebook_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("authenticateToSharedNotebook_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSharedNotebookByAuth_args : TBase
    {
      private string authenticationToken;

      public string AuthenticationToken
      {
        get
        {
          return authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this.authenticationToken = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authenticationToken;
      }

      public getSharedNotebookByAuth_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.authenticationToken = iprot.ReadString();
                this.__isset.authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSharedNotebookByAuth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.authenticationToken != null && __isset.authenticationToken) {
          field.Name = "authenticationToken";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.authenticationToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSharedNotebookByAuth_args(");
        sb.Append("authenticationToken: ");
        sb.Append(this.authenticationToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSharedNotebookByAuth_result : TBase
    {
      private Evernote.EDAM.Type.SharedNotebook success;
      private Evernote.EDAM.Error.EDAMUserException userException;
      private Evernote.EDAM.Error.EDAMNotFoundException notFoundException;
      private Evernote.EDAM.Error.EDAMSystemException systemException;

      public Evernote.EDAM.Type.SharedNotebook Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public Evernote.EDAM.Error.EDAMUserException UserException
      {
        get
        {
          return userException;
        }
        set
        {
          __isset.userException = true;
          this.userException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
      {
        get
        {
          return notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this.notFoundException = value;
        }
      }

      public Evernote.EDAM.Error.EDAMSystemException SystemException
      {
        get
        {
          return systemException;
        }
        set
        {
          __isset.systemException = true;
          this.systemException = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool userException;
        public bool notFoundException;
        public bool systemException;
      }

      public getSharedNotebookByAuth_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Evernote.EDAM.Type.SharedNotebook();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.userException = new Evernote.EDAM.Error.EDAMUserException();
                this.userException.Read(iprot);
                this.__isset.userException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.notFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                this.notFoundException.Read(iprot);
                this.__isset.notFoundException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.systemException = new Evernote.EDAM.Error.EDAMSystemException();
                this.systemException.Read(iprot);
                this.__isset.systemException = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSharedNotebookByAuth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.userException) {
          if (this.userException != null) {
            field.Name = "userException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.userException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notFoundException) {
          if (this.notFoundException != null) {
            field.Name = "notFoundException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.notFoundException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.systemException) {
          if (this.systemException != null) {
            field.Name = "systemException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.systemException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSharedNotebookByAuth_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",userException: ");
        sb.Append(this.userException== null ? "<null>" : this.userException.ToString());
        sb.Append(",notFoundException: ");
        sb.Append(this.notFoundException== null ? "<null>" : this.notFoundException.ToString());
        sb.Append(",systemException: ");
        sb.Append(this.systemException== null ? "<null>" : this.systemException.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
