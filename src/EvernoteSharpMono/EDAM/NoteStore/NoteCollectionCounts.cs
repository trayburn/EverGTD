/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.NoteStore
{

  [Serializable]
  public partial class NoteCollectionCounts : TBase
  {
    private Dictionary<string, int> notebookCounts;
    private Dictionary<string, int> tagCounts;

    public Dictionary<string, int> NotebookCounts
    {
      get
      {
        return notebookCounts;
      }
      set
      {
        __isset.notebookCounts = true;
        this.notebookCounts = value;
      }
    }

    public Dictionary<string, int> TagCounts
    {
      get
      {
        return tagCounts;
      }
      set
      {
        __isset.tagCounts = true;
        this.tagCounts = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool notebookCounts;
      public bool tagCounts;
    }

    public NoteCollectionCounts() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                this.notebookCounts = new Dictionary<string, int>();
                TMap _map52 = iprot.ReadMapBegin();
                for( int _i53 = 0; _i53 < _map52.Count; ++_i53)
                {
                  string _key54;
                  int _val55;
                  _key54 = iprot.ReadString();
                  _val55 = iprot.ReadI32();
                  this.notebookCounts[_key54] = _val55;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.notebookCounts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                this.tagCounts = new Dictionary<string, int>();
                TMap _map56 = iprot.ReadMapBegin();
                for( int _i57 = 0; _i57 < _map56.Count; ++_i57)
                {
                  string _key58;
                  int _val59;
                  _key58 = iprot.ReadString();
                  _val59 = iprot.ReadI32();
                  this.tagCounts[_key58] = _val59;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.tagCounts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NoteCollectionCounts");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.notebookCounts != null && __isset.notebookCounts) {
        field.Name = "notebookCounts";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, this.notebookCounts.Count));
          foreach (string _iter60 in this.notebookCounts.Keys)
          {
            oprot.WriteString(_iter60);
            oprot.WriteI32(this.notebookCounts[_iter60]);
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.tagCounts != null && __isset.tagCounts) {
        field.Name = "tagCounts";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, this.tagCounts.Count));
          foreach (string _iter61 in this.tagCounts.Keys)
          {
            oprot.WriteString(_iter61);
            oprot.WriteI32(this.tagCounts[_iter61]);
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NoteCollectionCounts(");
      sb.Append("notebookCounts: ");
      sb.Append(this.notebookCounts);
      sb.Append(",tagCounts: ");
      sb.Append(this.tagCounts);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
