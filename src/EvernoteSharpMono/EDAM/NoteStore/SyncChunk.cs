/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.NoteStore
{

  [Serializable]
  public partial class SyncChunk : TBase
  {
    private long currentTime;
    private int chunkHighUSN;
    private int updateCount;
    private List<Evernote.EDAM.Type.Note> notes;
    private List<Evernote.EDAM.Type.Notebook> notebooks;
    private List<Evernote.EDAM.Type.Tag> tags;
    private List<Evernote.EDAM.Type.SavedSearch> searches;
    private List<Evernote.EDAM.Type.Resource> resources;
    private List<string> expungedNotes;
    private List<string> expungedNotebooks;
    private List<string> expungedTags;
    private List<string> expungedSearches;

    public long CurrentTime
    {
      get
      {
        return currentTime;
      }
      set
      {
        __isset.currentTime = true;
        this.currentTime = value;
      }
    }

    public int ChunkHighUSN
    {
      get
      {
        return chunkHighUSN;
      }
      set
      {
        __isset.chunkHighUSN = true;
        this.chunkHighUSN = value;
      }
    }

    public int UpdateCount
    {
      get
      {
        return updateCount;
      }
      set
      {
        __isset.updateCount = true;
        this.updateCount = value;
      }
    }

    public List<Evernote.EDAM.Type.Note> Notes
    {
      get
      {
        return notes;
      }
      set
      {
        __isset.notes = true;
        this.notes = value;
      }
    }

    public List<Evernote.EDAM.Type.Notebook> Notebooks
    {
      get
      {
        return notebooks;
      }
      set
      {
        __isset.notebooks = true;
        this.notebooks = value;
      }
    }

    public List<Evernote.EDAM.Type.Tag> Tags
    {
      get
      {
        return tags;
      }
      set
      {
        __isset.tags = true;
        this.tags = value;
      }
    }

    public List<Evernote.EDAM.Type.SavedSearch> Searches
    {
      get
      {
        return searches;
      }
      set
      {
        __isset.searches = true;
        this.searches = value;
      }
    }

    public List<Evernote.EDAM.Type.Resource> Resources
    {
      get
      {
        return resources;
      }
      set
      {
        __isset.resources = true;
        this.resources = value;
      }
    }

    public List<string> ExpungedNotes
    {
      get
      {
        return expungedNotes;
      }
      set
      {
        __isset.expungedNotes = true;
        this.expungedNotes = value;
      }
    }

    public List<string> ExpungedNotebooks
    {
      get
      {
        return expungedNotebooks;
      }
      set
      {
        __isset.expungedNotebooks = true;
        this.expungedNotebooks = value;
      }
    }

    public List<string> ExpungedTags
    {
      get
      {
        return expungedTags;
      }
      set
      {
        __isset.expungedTags = true;
        this.expungedTags = value;
      }
    }

    public List<string> ExpungedSearches
    {
      get
      {
        return expungedSearches;
      }
      set
      {
        __isset.expungedSearches = true;
        this.expungedSearches = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool currentTime;
      public bool chunkHighUSN;
      public bool updateCount;
      public bool notes;
      public bool notebooks;
      public bool tags;
      public bool searches;
      public bool resources;
      public bool expungedNotes;
      public bool expungedNotebooks;
      public bool expungedTags;
      public bool expungedSearches;
    }

    public SyncChunk() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              this.currentTime = iprot.ReadI64();
              this.__isset.currentTime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.chunkHighUSN = iprot.ReadI32();
              this.__isset.chunkHighUSN = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              this.updateCount = iprot.ReadI32();
              this.__isset.updateCount = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                this.notes = new List<Evernote.EDAM.Type.Note>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note();
                  _elem2 = new Evernote.EDAM.Type.Note();
                  _elem2.Read(iprot);
                  this.notes.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
              this.__isset.notes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                this.notebooks = new List<Evernote.EDAM.Type.Notebook>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook();
                  _elem5 = new Evernote.EDAM.Type.Notebook();
                  _elem5.Read(iprot);
                  this.notebooks.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
              this.__isset.notebooks = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                this.tags = new List<Evernote.EDAM.Type.Tag>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag();
                  _elem8 = new Evernote.EDAM.Type.Tag();
                  _elem8.Read(iprot);
                  this.tags.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
              this.__isset.tags = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                this.searches = new List<Evernote.EDAM.Type.SavedSearch>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch();
                  _elem11 = new Evernote.EDAM.Type.SavedSearch();
                  _elem11.Read(iprot);
                  this.searches.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
              this.__isset.searches = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                this.resources = new List<Evernote.EDAM.Type.Resource>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource();
                  _elem14 = new Evernote.EDAM.Type.Resource();
                  _elem14.Read(iprot);
                  this.resources.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
              this.__isset.resources = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                this.expungedNotes = new List<string>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  string _elem17 = null;
                  _elem17 = iprot.ReadString();
                  this.expungedNotes.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
              this.__isset.expungedNotes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                this.expungedNotebooks = new List<string>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  string _elem20 = null;
                  _elem20 = iprot.ReadString();
                  this.expungedNotebooks.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
              this.__isset.expungedNotebooks = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                this.expungedTags = new List<string>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  string _elem23 = null;
                  _elem23 = iprot.ReadString();
                  this.expungedTags.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
              this.__isset.expungedTags = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                this.expungedSearches = new List<string>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  string _elem26 = null;
                  _elem26 = iprot.ReadString();
                  this.expungedSearches.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
              this.__isset.expungedSearches = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SyncChunk");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.currentTime) {
        field.Name = "currentTime";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.currentTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.chunkHighUSN) {
        field.Name = "chunkHighUSN";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.chunkHighUSN);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateCount) {
        field.Name = "updateCount";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.updateCount);
        oprot.WriteFieldEnd();
      }
      if (this.notes != null && __isset.notes) {
        field.Name = "notes";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.notes.Count));
          foreach (Evernote.EDAM.Type.Note _iter27 in this.notes)
          {
            _iter27.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.notebooks != null && __isset.notebooks) {
        field.Name = "notebooks";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.notebooks.Count));
          foreach (Evernote.EDAM.Type.Notebook _iter28 in this.notebooks)
          {
            _iter28.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.tags != null && __isset.tags) {
        field.Name = "tags";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.tags.Count));
          foreach (Evernote.EDAM.Type.Tag _iter29 in this.tags)
          {
            _iter29.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.searches != null && __isset.searches) {
        field.Name = "searches";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.searches.Count));
          foreach (Evernote.EDAM.Type.SavedSearch _iter30 in this.searches)
          {
            _iter30.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.resources != null && __isset.resources) {
        field.Name = "resources";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.resources.Count));
          foreach (Evernote.EDAM.Type.Resource _iter31 in this.resources)
          {
            _iter31.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.expungedNotes != null && __isset.expungedNotes) {
        field.Name = "expungedNotes";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.expungedNotes.Count));
          foreach (string _iter32 in this.expungedNotes)
          {
            oprot.WriteString(_iter32);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.expungedNotebooks != null && __isset.expungedNotebooks) {
        field.Name = "expungedNotebooks";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.expungedNotebooks.Count));
          foreach (string _iter33 in this.expungedNotebooks)
          {
            oprot.WriteString(_iter33);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.expungedTags != null && __isset.expungedTags) {
        field.Name = "expungedTags";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.expungedTags.Count));
          foreach (string _iter34 in this.expungedTags)
          {
            oprot.WriteString(_iter34);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.expungedSearches != null && __isset.expungedSearches) {
        field.Name = "expungedSearches";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.expungedSearches.Count));
          foreach (string _iter35 in this.expungedSearches)
          {
            oprot.WriteString(_iter35);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SyncChunk(");
      sb.Append("currentTime: ");
      sb.Append(this.currentTime);
      sb.Append(",chunkHighUSN: ");
      sb.Append(this.chunkHighUSN);
      sb.Append(",updateCount: ");
      sb.Append(this.updateCount);
      sb.Append(",notes: ");
      sb.Append(this.notes);
      sb.Append(",notebooks: ");
      sb.Append(this.notebooks);
      sb.Append(",tags: ");
      sb.Append(this.tags);
      sb.Append(",searches: ");
      sb.Append(this.searches);
      sb.Append(",resources: ");
      sb.Append(this.resources);
      sb.Append(",expungedNotes: ");
      sb.Append(this.expungedNotes);
      sb.Append(",expungedNotebooks: ");
      sb.Append(this.expungedNotebooks);
      sb.Append(",expungedTags: ");
      sb.Append(this.expungedTags);
      sb.Append(",expungedSearches: ");
      sb.Append(this.expungedSearches);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
