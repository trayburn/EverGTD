/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.Type
{

  [Serializable]
  public partial class Accounting : TBase
  {
    private long uploadLimit;
    private long uploadLimitEnd;
    private long uploadLimitNextMonth;
    private PremiumOrderStatus premiumServiceStatus;
    private string premiumOrderNumber;
    private string premiumCommerceService;
    private long premiumServiceStart;
    private string premiumServiceSKU;
    private long lastSuccessfulCharge;
    private long lastFailedCharge;
    private string lastFailedChargeReason;
    private long nextPaymentDue;
    private long premiumLockUntil;
    private long updated;
    private string premiumSubscriptionNumber;
    private long lastRequestedCharge;

    public long UploadLimit
    {
      get
      {
        return uploadLimit;
      }
      set
      {
        __isset.uploadLimit = true;
        this.uploadLimit = value;
      }
    }

    public long UploadLimitEnd
    {
      get
      {
        return uploadLimitEnd;
      }
      set
      {
        __isset.uploadLimitEnd = true;
        this.uploadLimitEnd = value;
      }
    }

    public long UploadLimitNextMonth
    {
      get
      {
        return uploadLimitNextMonth;
      }
      set
      {
        __isset.uploadLimitNextMonth = true;
        this.uploadLimitNextMonth = value;
      }
    }

    public PremiumOrderStatus PremiumServiceStatus
    {
      get
      {
        return premiumServiceStatus;
      }
      set
      {
        __isset.premiumServiceStatus = true;
        this.premiumServiceStatus = value;
      }
    }

    public string PremiumOrderNumber
    {
      get
      {
        return premiumOrderNumber;
      }
      set
      {
        __isset.premiumOrderNumber = true;
        this.premiumOrderNumber = value;
      }
    }

    public string PremiumCommerceService
    {
      get
      {
        return premiumCommerceService;
      }
      set
      {
        __isset.premiumCommerceService = true;
        this.premiumCommerceService = value;
      }
    }

    public long PremiumServiceStart
    {
      get
      {
        return premiumServiceStart;
      }
      set
      {
        __isset.premiumServiceStart = true;
        this.premiumServiceStart = value;
      }
    }

    public string PremiumServiceSKU
    {
      get
      {
        return premiumServiceSKU;
      }
      set
      {
        __isset.premiumServiceSKU = true;
        this.premiumServiceSKU = value;
      }
    }

    public long LastSuccessfulCharge
    {
      get
      {
        return lastSuccessfulCharge;
      }
      set
      {
        __isset.lastSuccessfulCharge = true;
        this.lastSuccessfulCharge = value;
      }
    }

    public long LastFailedCharge
    {
      get
      {
        return lastFailedCharge;
      }
      set
      {
        __isset.lastFailedCharge = true;
        this.lastFailedCharge = value;
      }
    }

    public string LastFailedChargeReason
    {
      get
      {
        return lastFailedChargeReason;
      }
      set
      {
        __isset.lastFailedChargeReason = true;
        this.lastFailedChargeReason = value;
      }
    }

    public long NextPaymentDue
    {
      get
      {
        return nextPaymentDue;
      }
      set
      {
        __isset.nextPaymentDue = true;
        this.nextPaymentDue = value;
      }
    }

    public long PremiumLockUntil
    {
      get
      {
        return premiumLockUntil;
      }
      set
      {
        __isset.premiumLockUntil = true;
        this.premiumLockUntil = value;
      }
    }

    public long Updated
    {
      get
      {
        return updated;
      }
      set
      {
        __isset.updated = true;
        this.updated = value;
      }
    }

    public string PremiumSubscriptionNumber
    {
      get
      {
        return premiumSubscriptionNumber;
      }
      set
      {
        __isset.premiumSubscriptionNumber = true;
        this.premiumSubscriptionNumber = value;
      }
    }

    public long LastRequestedCharge
    {
      get
      {
        return lastRequestedCharge;
      }
      set
      {
        __isset.lastRequestedCharge = true;
        this.lastRequestedCharge = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool uploadLimit;
      public bool uploadLimitEnd;
      public bool uploadLimitNextMonth;
      public bool premiumServiceStatus;
      public bool premiumOrderNumber;
      public bool premiumCommerceService;
      public bool premiumServiceStart;
      public bool premiumServiceSKU;
      public bool lastSuccessfulCharge;
      public bool lastFailedCharge;
      public bool lastFailedChargeReason;
      public bool nextPaymentDue;
      public bool premiumLockUntil;
      public bool updated;
      public bool premiumSubscriptionNumber;
      public bool lastRequestedCharge;
    }

    public Accounting() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              this.uploadLimit = iprot.ReadI64();
              this.__isset.uploadLimit = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              this.uploadLimitEnd = iprot.ReadI64();
              this.__isset.uploadLimitEnd = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.uploadLimitNextMonth = iprot.ReadI64();
              this.__isset.uploadLimitNextMonth = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              this.premiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();
              this.__isset.premiumServiceStatus = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              this.premiumOrderNumber = iprot.ReadString();
              this.__isset.premiumOrderNumber = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              this.premiumCommerceService = iprot.ReadString();
              this.__isset.premiumCommerceService = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              this.premiumServiceStart = iprot.ReadI64();
              this.__isset.premiumServiceStart = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              this.premiumServiceSKU = iprot.ReadString();
              this.__isset.premiumServiceSKU = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              this.lastSuccessfulCharge = iprot.ReadI64();
              this.__isset.lastSuccessfulCharge = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              this.lastFailedCharge = iprot.ReadI64();
              this.__isset.lastFailedCharge = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              this.lastFailedChargeReason = iprot.ReadString();
              this.__isset.lastFailedChargeReason = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              this.nextPaymentDue = iprot.ReadI64();
              this.__isset.nextPaymentDue = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              this.premiumLockUntil = iprot.ReadI64();
              this.__isset.premiumLockUntil = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              this.updated = iprot.ReadI64();
              this.__isset.updated = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              this.premiumSubscriptionNumber = iprot.ReadString();
              this.__isset.premiumSubscriptionNumber = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I64) {
              this.lastRequestedCharge = iprot.ReadI64();
              this.__isset.lastRequestedCharge = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Accounting");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uploadLimit) {
        field.Name = "uploadLimit";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.uploadLimit);
        oprot.WriteFieldEnd();
      }
      if (__isset.uploadLimitEnd) {
        field.Name = "uploadLimitEnd";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.uploadLimitEnd);
        oprot.WriteFieldEnd();
      }
      if (__isset.uploadLimitNextMonth) {
        field.Name = "uploadLimitNextMonth";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.uploadLimitNextMonth);
        oprot.WriteFieldEnd();
      }
      if (__isset.premiumServiceStatus) {
        field.Name = "premiumServiceStatus";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.premiumServiceStatus);
        oprot.WriteFieldEnd();
      }
      if (this.premiumOrderNumber != null && __isset.premiumOrderNumber) {
        field.Name = "premiumOrderNumber";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.premiumOrderNumber);
        oprot.WriteFieldEnd();
      }
      if (this.premiumCommerceService != null && __isset.premiumCommerceService) {
        field.Name = "premiumCommerceService";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.premiumCommerceService);
        oprot.WriteFieldEnd();
      }
      if (__isset.premiumServiceStart) {
        field.Name = "premiumServiceStart";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.premiumServiceStart);
        oprot.WriteFieldEnd();
      }
      if (this.premiumServiceSKU != null && __isset.premiumServiceSKU) {
        field.Name = "premiumServiceSKU";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.premiumServiceSKU);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastSuccessfulCharge) {
        field.Name = "lastSuccessfulCharge";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.lastSuccessfulCharge);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastFailedCharge) {
        field.Name = "lastFailedCharge";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.lastFailedCharge);
        oprot.WriteFieldEnd();
      }
      if (this.lastFailedChargeReason != null && __isset.lastFailedChargeReason) {
        field.Name = "lastFailedChargeReason";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.lastFailedChargeReason);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextPaymentDue) {
        field.Name = "nextPaymentDue";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.nextPaymentDue);
        oprot.WriteFieldEnd();
      }
      if (__isset.premiumLockUntil) {
        field.Name = "premiumLockUntil";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.premiumLockUntil);
        oprot.WriteFieldEnd();
      }
      if (__isset.updated) {
        field.Name = "updated";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.updated);
        oprot.WriteFieldEnd();
      }
      if (this.premiumSubscriptionNumber != null && __isset.premiumSubscriptionNumber) {
        field.Name = "premiumSubscriptionNumber";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.premiumSubscriptionNumber);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastRequestedCharge) {
        field.Name = "lastRequestedCharge";
        field.Type = TType.I64;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.lastRequestedCharge);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Accounting(");
      sb.Append("uploadLimit: ");
      sb.Append(this.uploadLimit);
      sb.Append(",uploadLimitEnd: ");
      sb.Append(this.uploadLimitEnd);
      sb.Append(",uploadLimitNextMonth: ");
      sb.Append(this.uploadLimitNextMonth);
      sb.Append(",premiumServiceStatus: ");
      sb.Append(this.premiumServiceStatus);
      sb.Append(",premiumOrderNumber: ");
      sb.Append(this.premiumOrderNumber);
      sb.Append(",premiumCommerceService: ");
      sb.Append(this.premiumCommerceService);
      sb.Append(",premiumServiceStart: ");
      sb.Append(this.premiumServiceStart);
      sb.Append(",premiumServiceSKU: ");
      sb.Append(this.premiumServiceSKU);
      sb.Append(",lastSuccessfulCharge: ");
      sb.Append(this.lastSuccessfulCharge);
      sb.Append(",lastFailedCharge: ");
      sb.Append(this.lastFailedCharge);
      sb.Append(",lastFailedChargeReason: ");
      sb.Append(this.lastFailedChargeReason);
      sb.Append(",nextPaymentDue: ");
      sb.Append(this.nextPaymentDue);
      sb.Append(",premiumLockUntil: ");
      sb.Append(this.premiumLockUntil);
      sb.Append(",updated: ");
      sb.Append(this.updated);
      sb.Append(",premiumSubscriptionNumber: ");
      sb.Append(this.premiumSubscriptionNumber);
      sb.Append(",lastRequestedCharge: ");
      sb.Append(this.lastRequestedCharge);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
