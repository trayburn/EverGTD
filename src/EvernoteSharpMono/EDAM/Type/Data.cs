/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.Type
{

  [Serializable]
  public partial class Data : TBase
  {
    private byte[] bodyHash;
    private int size;
    private byte[] body;

    public byte[] BodyHash
    {
      get
      {
        return bodyHash;
      }
      set
      {
        __isset.bodyHash = true;
        this.bodyHash = value;
      }
    }

    public int Size
    {
      get
      {
        return size;
      }
      set
      {
        __isset.size = true;
        this.size = value;
      }
    }

    public byte[] Body
    {
      get
      {
        return body;
      }
      set
      {
        __isset.body = true;
        this.body = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool bodyHash;
      public bool size;
      public bool body;
    }

    public Data() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.bodyHash = iprot.ReadBinary();
              this.__isset.bodyHash = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.size = iprot.ReadI32();
              this.__isset.size = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              this.body = iprot.ReadBinary();
              this.__isset.body = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Data");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.bodyHash != null && __isset.bodyHash) {
        field.Name = "bodyHash";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.bodyHash);
        oprot.WriteFieldEnd();
      }
      if (__isset.size) {
        field.Name = "size";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.size);
        oprot.WriteFieldEnd();
      }
      if (this.body != null && __isset.body) {
        field.Name = "body";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.body);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Data(");
      sb.Append("bodyHash: ");
      sb.Append(this.bodyHash);
      sb.Append(",size: ");
      sb.Append(this.size);
      sb.Append(",body: ");
      sb.Append(this.body);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
