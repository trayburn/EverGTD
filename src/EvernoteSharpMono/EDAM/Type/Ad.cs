/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.Type
{

  [Serializable]
  public partial class Ad : TBase
  {
    private int id;
    private short width;
    private short height;
    private string advertiserName;
    private string imageUrl;
    private string destinationUrl;
    private short displaySeconds;
    private double score;
    private byte[] image;
    private string imageMime;
    private string html;
    private double displayFrequency;

    public int Id
    {
      get
      {
        return id;
      }
      set
      {
        __isset.id = true;
        this.id = value;
      }
    }

    public short Width
    {
      get
      {
        return width;
      }
      set
      {
        __isset.width = true;
        this.width = value;
      }
    }

    public short Height
    {
      get
      {
        return height;
      }
      set
      {
        __isset.height = true;
        this.height = value;
      }
    }

    public string AdvertiserName
    {
      get
      {
        return advertiserName;
      }
      set
      {
        __isset.advertiserName = true;
        this.advertiserName = value;
      }
    }

    public string ImageUrl
    {
      get
      {
        return imageUrl;
      }
      set
      {
        __isset.imageUrl = true;
        this.imageUrl = value;
      }
    }

    public string DestinationUrl
    {
      get
      {
        return destinationUrl;
      }
      set
      {
        __isset.destinationUrl = true;
        this.destinationUrl = value;
      }
    }

    public short DisplaySeconds
    {
      get
      {
        return displaySeconds;
      }
      set
      {
        __isset.displaySeconds = true;
        this.displaySeconds = value;
      }
    }

    public double Score
    {
      get
      {
        return score;
      }
      set
      {
        __isset.score = true;
        this.score = value;
      }
    }

    public byte[] Image
    {
      get
      {
        return image;
      }
      set
      {
        __isset.image = true;
        this.image = value;
      }
    }

    public string ImageMime
    {
      get
      {
        return imageMime;
      }
      set
      {
        __isset.imageMime = true;
        this.imageMime = value;
      }
    }

    public string Html
    {
      get
      {
        return html;
      }
      set
      {
        __isset.html = true;
        this.html = value;
      }
    }

    public double DisplayFrequency
    {
      get
      {
        return displayFrequency;
      }
      set
      {
        __isset.displayFrequency = true;
        this.displayFrequency = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool width;
      public bool height;
      public bool advertiserName;
      public bool imageUrl;
      public bool destinationUrl;
      public bool displaySeconds;
      public bool score;
      public bool image;
      public bool imageMime;
      public bool html;
      public bool displayFrequency;
    }

    public Ad() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.id = iprot.ReadI32();
              this.__isset.id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              this.width = iprot.ReadI16();
              this.__isset.width = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              this.height = iprot.ReadI16();
              this.__isset.height = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              this.advertiserName = iprot.ReadString();
              this.__isset.advertiserName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              this.imageUrl = iprot.ReadString();
              this.__isset.imageUrl = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              this.destinationUrl = iprot.ReadString();
              this.__isset.destinationUrl = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              this.displaySeconds = iprot.ReadI16();
              this.__isset.displaySeconds = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              this.score = iprot.ReadDouble();
              this.__isset.score = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              this.image = iprot.ReadBinary();
              this.__isset.image = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              this.imageMime = iprot.ReadString();
              this.__isset.imageMime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              this.html = iprot.ReadString();
              this.__isset.html = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Double) {
              this.displayFrequency = iprot.ReadDouble();
              this.__isset.displayFrequency = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Ad");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.id);
        oprot.WriteFieldEnd();
      }
      if (__isset.width) {
        field.Name = "width";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(this.width);
        oprot.WriteFieldEnd();
      }
      if (__isset.height) {
        field.Name = "height";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(this.height);
        oprot.WriteFieldEnd();
      }
      if (this.advertiserName != null && __isset.advertiserName) {
        field.Name = "advertiserName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.advertiserName);
        oprot.WriteFieldEnd();
      }
      if (this.imageUrl != null && __isset.imageUrl) {
        field.Name = "imageUrl";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.imageUrl);
        oprot.WriteFieldEnd();
      }
      if (this.destinationUrl != null && __isset.destinationUrl) {
        field.Name = "destinationUrl";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.destinationUrl);
        oprot.WriteFieldEnd();
      }
      if (__isset.displaySeconds) {
        field.Name = "displaySeconds";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(this.displaySeconds);
        oprot.WriteFieldEnd();
      }
      if (__isset.score) {
        field.Name = "score";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(this.score);
        oprot.WriteFieldEnd();
      }
      if (this.image != null && __isset.image) {
        field.Name = "image";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.image);
        oprot.WriteFieldEnd();
      }
      if (this.imageMime != null && __isset.imageMime) {
        field.Name = "imageMime";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.imageMime);
        oprot.WriteFieldEnd();
      }
      if (this.html != null && __isset.html) {
        field.Name = "html";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.html);
        oprot.WriteFieldEnd();
      }
      if (__isset.displayFrequency) {
        field.Name = "displayFrequency";
        field.Type = TType.Double;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(this.displayFrequency);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Ad(");
      sb.Append("id: ");
      sb.Append(this.id);
      sb.Append(",width: ");
      sb.Append(this.width);
      sb.Append(",height: ");
      sb.Append(this.height);
      sb.Append(",advertiserName: ");
      sb.Append(this.advertiserName);
      sb.Append(",imageUrl: ");
      sb.Append(this.imageUrl);
      sb.Append(",destinationUrl: ");
      sb.Append(this.destinationUrl);
      sb.Append(",displaySeconds: ");
      sb.Append(this.displaySeconds);
      sb.Append(",score: ");
      sb.Append(this.score);
      sb.Append(",image: ");
      sb.Append(this.image);
      sb.Append(",imageMime: ");
      sb.Append(this.imageMime);
      sb.Append(",html: ");
      sb.Append(this.html);
      sb.Append(",displayFrequency: ");
      sb.Append(this.displayFrequency);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
